@model IEnumerable<product_catalog_app.src.models.Category>
@{
    ViewData["Title"] = "Kategori Yönetimi";
    var productCounts = ViewBag.ProductCounts as Dictionary<int, int> ?? new Dictionary<int, int>();
    var totalProducts = productCounts.Values.Sum();
    
    // Header için parametreler
    ViewBag.HeaderType = "category-management";
    ViewBag.HeaderTitle = "Kategori Yönetimi";
    ViewBag.HeaderSubtitle = "Ürün kategorilerini düzenle, yönet ve optimize et";
    ViewBag.HeaderIcon = "fas fa-tags";
    ViewBag.HeaderStats = new[] {
        new { Type = "primary", Icon = "fas fa-layer-group", Value = Model.Count(), Label = "Toplam Kategori" },
        new { Type = "secondary", Icon = "fas fa-box-open", Value = totalProducts, Label = "Toplam Ürün" },
        new { Type = "accent", Icon = "fas fa-chart-line", Value = Model.Count(c => c.IsActive), Label = "Aktif Kategori" }
    };
}

<div class="container">
    <!-- Ortak Header Component -->
    @await Html.PartialAsync("_PageHeader")

    <!-- Action Bar -->
    <div class="action-bar">
        <div class="action-left">
            <a href="@Url.Action("Create", "Category")" class="btn btn-primary btn-create">
                <i class="fas fa-plus"></i> Kategori Ekle
            </a>
            <button class="btn btn-outline-secondary btn-refresh" onclick="refreshCategories()">
                <i class="fas fa-sync-alt"></i> Yenile
            </button>
        </div>
        <div class="action-right">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" 
                       id="categorySearch" 
                       class="search-input" 
                       placeholder="Kategori ara..." 
                       onkeyup="filterCategories(this.value)">
            </div>
            <div class="view-options">
                <button class="view-btn active" data-view="grid" onclick="toggleView('grid')">
                    <i class="fas fa-th-large"></i>
                </button>
                <button class="view-btn" data-view="list" onclick="toggleView('list')">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Categories Grid -->
    <div class="categories-grid" id="categoriesGrid">
        @if (Model.Any())
        {
            @foreach (var item in Model)
            {
                <div class="category-card" data-category-name="@item.Name.ToLower()">
                    <div class="card-header">
                        <div class="category-info">
                            <h3 class="category-name">
                                <a href="@Url.Action("Edit", "Category", new { id = item.Id })" class="category-link">
                                    @item.Name
                                </a>
                            </h3>
                            @if (!string.IsNullOrEmpty(item.Description))
                            {
                                <p class="category-description">@item.Description</p>
                            }
                        </div>
                        <div class="action-dropdown">
                            <button class="action-btn" onclick="toggleDropdown(this)">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <div class="dropdown-menu">
                                <button class="dropdown-item" onclick="showEditModal(@item.Id, '@item.Name', '@(item.Description ?? "")')">
                                    <i class="fas fa-lightning-bolt"></i> Hızlı Düzenle
                                </button>
                                <div class="dropdown-divider"></div>
                                <a href="@Url.Action("Edit", "Category", new { id = item.Id })" class="dropdown-item">
                                    <i class="fas fa-edit"></i> Düzenle
                                </a>
                                <div class="dropdown-divider"></div>
                                @if (productCounts.ContainsKey(item.Id) && productCounts[item.Id] == 0)
                                {
                                    <a href="@Url.Action("Delete", "Category", new { id = item.Id })" 
                                       class="dropdown-item text-danger"
                                       onclick="return confirmDelete('@item.Name')">
                                        <i class="fas fa-trash"></i> Sil
                                    </a>
                                }
                                else
                                {
                                    <div class="dropdown-item disabled">
                                        <i class="fas fa-lock"></i> Silinemez (@(productCounts[item.Id]) ürün)
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="category-stats">
                            <div class="stat-item primary">
                                <div class="stat-icon">
                                    <i class="fas fa-box"></i>
                                </div>
                                <div class="stat-content">
                                    <div class="stat-number">@(productCounts.ContainsKey(item.Id) ? productCounts[item.Id] : 0)</div>
                                    <div class="stat-label">Ürün</div>
                                </div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </div>
                                <div class="stat-content">
                                    <div class="stat-number">@item.CreatedDate.ToTurkeyTimeString("dd.MM")</div>
                                    <div class="stat-label">@item.CreatedDate.ToTurkeyTimeString("yyyy")</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="category-footer">
                            <div class="category-status">
                                @if (item.IsActive)
                                {
                                    <span class="status-badge active">
                                        <i class="fas fa-check-circle"></i> Aktif
                                    </span>
                                }
                                else
                                {
                                    <span class="status-badge inactive">
                                        <i class="fas fa-times-circle"></i> Pasif
                                    </span>
                                }
                            </div>
                            <div class="category-progress">
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: @(totalProducts > 0 ? (productCounts.ContainsKey(item.Id) ? productCounts[item.Id] * 100 / totalProducts : 0) : 0)%"></div>
                                </div>
                                <span class="progress-text">@(totalProducts > 0 ? Math.Round((decimal)(productCounts.ContainsKey(item.Id) ? productCounts[item.Id] * 100 / totalProducts : 0), 1) : 0)%</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-tags"></i>
                </div>
                <h3>Henüz kategori yok</h3>
                <p>İlk kategorinizi oluşturmak için butona tıklayın</p>
                <a href="@Url.Action("Create", "Category")" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus"></i> İlk Kategoriyi Ekle
                </a>
            </div>
        }
    </div>

    <!-- List View -->
    <div class="categories-list hidden" id="categoriesList">
        <div class="list-header">
            <div>Kategori</div>
            <div>Açıklama</div>
            <div>Ürün Sayısı</div>
            <div>Durum</div>
            <div>İşlemler</div>
        </div>
        @if (Model.Any())
        {
            @foreach (var category in Model)
            {
                <div class="list-item" data-category-name="@category.Name.ToLower()">
                    <div class="list-category-info">
                        <strong>@category.Name</strong>
                    </div>
                    <div class="list-description">
                        @(category.Description ?? "Açıklama yok")
                    </div>
                    <div class="list-product-count">
                        <span class="badge">@(productCounts.ContainsKey(category.Id) ? productCounts[category.Id] : 0) ürün</span>
                    </div>
                    <div class="list-status">
                        @if (category.IsActive)
                        {
                            <span class="status-badge active">
                                <i class="fas fa-check-circle"></i> Aktif
                            </span>
                        }
                        else
                        {
                            <span class="status-badge inactive">
                                <i class="fas fa-times-circle"></i> Pasif
                            </span>
                        }
                    </div>
                    <div class="list-actions">
                        <div class="action-dropdown">
                            <button class="action-btn" onclick="toggleDropdown(this)">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <div class="dropdown-menu">
                                <button class="dropdown-item" onclick="showEditModal(@category.Id, '@category.Name', '@(category.Description ?? "")')">
                                    <i class="fas fa-lightning-bolt"></i> Hızlı Düzenle
                                </button>
                                <div class="dropdown-divider"></div>
                                <a href="@Url.Action("Edit", "Category", new { id = category.Id })" class="dropdown-item">
                                    <i class="fas fa-edit"></i> Düzenle
                                </a>
                                <div class="dropdown-divider"></div>
                                @if (productCounts.ContainsKey(category.Id) && productCounts[category.Id] == 0)
                                {
                                    <a href="@Url.Action("Delete", "Category", new { id = category.Id })" 
                                       class="dropdown-item text-danger"
                                       onclick="return confirmDelete('@category.Name')">
                                        <i class="fas fa-trash"></i> Sil
                                    </a>
                                }
                                else
                                {
                                    <div class="dropdown-item disabled">
                                        <i class="fas fa-lock"></i> Silinemez (@(productCounts[category.Id]) ürün)
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-tags"></i>
                </div>
                <h3>Henüz kategori yok</h3>
                <p>İlk kategorinizi oluşturmak için butona tıklayın</p>
                <a href="@Url.Action("Create", "Category")" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus"></i> İlk Kategoriyi Ekle
                </a>
            </div>
        }
    </div>
</div>

<!-- Quick Edit Modal -->
<div class="modal" id="quickEditModal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3><i class="fas fa-edit"></i> Hızlı Düzenle</h3>
            <button type="button" class="close-btn" onclick="closeEditModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="quickEditForm" onsubmit="submitQuickEdit(event)">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editCategoryId" name="id" />
                
                <div class="form-group">
                    <label for="editCategoryName">Kategori Adı</label>
                    <input type="text" id="editCategoryName" name="name" class="form-control" required />
                </div>
                
                <div class="form-group">
                    <label for="editCategoryDescription">Açıklama</label>
                    <textarea id="editCategoryDescription" name="description" class="form-control" rows="3"></textarea>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeEditModal()">İptal</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Kaydet
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
/* Category Management Page Specific Styles */
.category-management-page {
    padding: 30px;
    background: white;
    min-height: calc(100vh - 120px);
    border-radius: 20px;
    margin: 20px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.06);
    border: 1px solid rgba(0,0,0,0.04);
}

/* Action Bar */
.action-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
    padding: 25px;
    border-radius: 16px;
    margin-bottom: 30px;
    border: 1px solid rgba(0,0,0,0.05);
    backdrop-filter: blur(10px);
}

.action-left {
    display: flex;
    gap: 15px;
    align-items: center;
}

.action-right {
    display: flex;
    gap: 15px;
    align-items: center;
}

.btn {
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    font-size: 0.95em;
}

.btn-primary {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
}

.btn-outline-secondary {
    background: white;
    color: #6c757d;
    border: 2px solid #e9ecef;
}

.btn-outline-secondary:hover {
    background: #f8f9fa;
    border-color: #dee2e6;
    transform: translateY(-1px);
}

.btn-create {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
}

.btn-refresh {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    border: none;
}

/* View Options */
.view-options {
    display: flex;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 4px;
}

.view-btn {
    padding: 8px 12px;
    border: none;
    background: none;
    color: #6c757d;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.view-btn.active {
    background: white;
    color: #495057;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Search Box */
.search-box {
    position: relative;
}

.search-input {
    padding: 12px 16px 12px 40px;
    border: 2px solid #e9ecef;
    border-radius: 25px;
    width: 250px;
    transition: all 0.3s ease;
}

.search-input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.search-icon {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
}

/* Categories Grid */
.categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 25px;
    background: transparent;
    padding: 0;
}

.category-card {
    background: white;
    border-radius: 16px;
    padding: 0;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    overflow: hidden;
    border: 1px solid rgba(0,0,0,0.05);
}

.category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 40px rgba(0,0,0,0.15);
}

.card-header {
    padding: 25px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid rgba(0,0,0,0.05);
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.category-info {
    flex: 1;
}

.category-name {
    margin: 0 0 8px 0;
    font-size: 1.4em;
    font-weight: 700;
}

.category-link {
    color: #333;
    text-decoration: none;
    transition: all 0.3s ease;
}

.category-link:hover {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-decoration: none;
}

.category-description {
    color: #666;
    margin: 0;
    font-size: 0.9em;
    line-height: 1.5;
}

/* Action Dropdown */
.action-dropdown {
    position: relative;
}

.action-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: rgba(0,0,0,0.05);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.action-btn:hover {
    background: rgba(0,0,0,0.1);
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.15);
    min-width: 200px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
}

.dropdown-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 16px;
    color: #495057;
    text-decoration: none;
    transition: all 0.2s ease;
    border: none;
    background: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
}

.dropdown-item:hover {
    background: #f8f9fa;
    color: #495057;
    text-decoration: none;
}

.dropdown-item.text-danger {
    color: #dc3545;
}

.dropdown-item.text-danger:hover {
    background: #f8d7da;
    color: #721c24;
}

.dropdown-item.disabled {
    color: #6c757d;
    cursor: not-allowed;
    opacity: 0.6;
}

/* Card Body */
.card-body {
    padding: 25px;
}

.category-stats {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 10px;
    flex: 1;
    transition: all 0.3s ease;
}

.stat-item.primary {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
}

.stat-item.primary .stat-number,
.stat-item.primary .stat-label {
    color: white;
}

.stat-item:hover {
    transform: translateY(-2px);
}

.stat-item .stat-icon {
    width: 35px;
    height: 35px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #007bff;
}

.stat-item .stat-content {
    flex: 1;
}

.stat-item .stat-number {
    font-size: 1.3em;
    font-weight: 700;
    line-height: 1;
}

.stat-item .stat-label {
    font-size: 0.8em;
    opacity: 0.8;
}

/* Category Footer */
.category-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 15px;
    border-top: 1px solid #e9ecef;
}

.status-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.8em;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 5px;
}

.status-badge.active {
    background: #d4edda;
    color: #155724;
}

.status-badge.inactive {
    background: #f8d7da;
    color: #721c24;
}

.category-progress {
    display: flex;
    align-items: center;
    gap: 10px;
}

.progress-bar {
    width: 80px;
    height: 6px;
    background: #e9ecef;
    border-radius: 3px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 0.8em;
    color: #6c757d;
    font-weight: 600;
    min-width: 35px;
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 80px 20px;
    grid-column: 1 / -1;
}

.empty-icon {
    font-size: 4em;
    color: #e9ecef;
    margin-bottom: 20px;
}

.empty-state h3 {
    color: #495057;
    margin-bottom: 15px;
    font-size: 1.8em;
}

.empty-state p {
    color: #6c757d;
    margin-bottom: 30px;
    font-size: 1.1em;
    line-height: 1.6;
}

.btn-lg {
    padding: 15px 30px;
    font-size: 1.1em;
}

/* Animations */
@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

@@keyframes modalSlideIn {
    from { transform: translateY(-50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
    align-items: center;
    justify-content: center;
}

.modal.show {
    display: flex; /* Flex ile ekranın ortasına hizalar */
}

.modal-content {
    background: white;
    margin: 0;
    padding: 0;
    border-radius: 16px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    animation: modalSlideIn 0.3s ease-out;
}

.modal-header {
    padding: 25px;
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 16px 16px 0 0;
}

.modal-header h3 {
    margin: 0;
    font-size: 1.3em;
    display: flex;
    align-items: center;
    gap: 10px;
}

.close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 1.2em;
    cursor: pointer;
    padding: 5px;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.close-btn:hover {
    background: rgba(255,255,255,0.1);
}

.modal-body {
    padding: 25px;
}

.modal-footer {
    padding: 20px 25px;
    background: #f8f9fa;
    border-radius: 0 0 16px 16px;
    display: flex;
    gap: 15px;
    justify-content: flex-end;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #333;
}

.form-control {
    width: 100%;
    padding: 12px 15px;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 1em;
    transition: all 0.3s ease;
    box-sizing: border-box;
}

.form-control:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.form-actions {
    display: flex;
    gap: 15px;
    justify-content: flex-end;
    margin-top: 25px;
}

.btn-secondary {
    background: var(--secondary-color);
    color: var(--white);
}

.btn-secondary:hover {
    background: #545b62;
}

/* Utility Classes */
.hidden {
    display: none !important;
}

/* List View Styles */
.categories-list {
    display: none;
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
}

.list-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 20px;
    border-bottom: 1px solid rgba(0,0,0,0.05);
    display: grid;
    grid-template-columns: 2fr 2fr 1fr 1fr 1fr;
    gap: 20px;
    font-weight: 600;
    color: #495057;
}

.list-item {
    display: grid;
    grid-template-columns: 2fr 2fr 1fr 1fr 1fr;
    gap: 20px;
    padding: 20px;
    border-bottom: 1px solid #e9ecef;
    align-items: center;
    transition: all 0.2s ease;
}

.list-item:hover {
    background: #f8f9fa;
}

.list-item:last-child {
    border-bottom: none;
}

.list-category-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.list-description {
    color: #6c757d;
    font-size: 0.9em;
}

.list-product-count .badge {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
}

.list-status {
    display: flex;
    align-items: center;
}

.list-actions {
    display: flex;
    justify-content: center;
}

/* Responsive */
@@media (max-width: 768px) {
    .category-management-page {
        padding: 15px;
    }
    
    .header-content {
        flex-direction: column;
        text-align: center;
        gap: 20px;
    }
    
    .header-stats {
        flex-direction: column;
        width: 100%;
    }
    
    .stat-card {
        width: 100%;
    }
    
    .action-bar {
        flex-direction: column;
        gap: 15px;
    }
    
    .action-right {
        flex-direction: column;
        gap: 15px;
        width: 100%;
    }
    
    .search-input {
        width: 100%;
    }
    
    .categories-grid {
        grid-template-columns: 1fr;
    }
    
    .category-stats {
        flex-direction: column;
        gap: 10px;
    }
    
    .category-footer {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
    }
    
    .modal-content {
        width: 95%;
        margin: 10% auto;
    }
}
</style>

<script>
// JavaScript functions for category management
document.addEventListener('DOMContentLoaded', function() {
    // Initialize search functionality
    const searchInput = document.getElementById('categorySearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            filterCategories(this.value);
        });
    }

    // Set initial view based on saved preference
    const savedView = localStorage.getItem('categoryView') || 'grid';
    toggleView(savedView);

    // Initialize search with empty string
    filterCategories('');

    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.action-dropdown')) {
            closeAllDropdowns();
        }
    });

    // Handle dropdown item clicks to prevent dropdown from closing prematurely
    document.addEventListener('click', function(e) {
        if (e.target.closest('.dropdown-item')) {
            e.stopPropagation();
        }
    });

    // Close modal when clicking outside
    const modal = document.getElementById('quickEditModal');
    if (modal) {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditModal();
            }
        });
    }

    // Initialize quick edit form
    const quickEditForm = document.getElementById('quickEditForm');
    if (quickEditForm) {
        quickEditForm.addEventListener('submit', function(e) {
            e.preventDefault();
            submitQuickEdit();
        });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl+N for new category
        if (e.ctrlKey && e.key === 'n') {
            e.preventDefault();
            window.location.href = '/Category/Create';
        }
        
        // Escape to close modal
        if (e.key === 'Escape') {
            closeEditModal();
            closeAllDropdowns();
        }
        
        // Ctrl+F to focus search
        if (e.ctrlKey && e.key === 'f') {
            e.preventDefault();
            document.getElementById('categorySearch').focus();
        }
    });
});

function filterCategories(searchTerm) {
    // Türkçe karakter normalizasyon fonksiyonu
    function normalizeText(text) {
        if (!text) return '';
        return text
            .replace(/ı/g, 'i').replace(/İ/g, 'I')
            .replace(/ğ/g, 'g').replace(/Ğ/g, 'G')
            .replace(/ü/g, 'u').replace(/Ü/g, 'U')
            .replace(/ş/g, 's').replace(/Ş/g, 'S')
            .replace(/ö/g, 'o').replace(/Ö/g, 'O')
            .replace(/ç/g, 'c').replace(/Ç/g, 'C')
            .toLowerCase()
            .trim();
    }

    // Grid view categories
    const categories = document.querySelectorAll('.category-card');
    // List view categories
    const listItems = document.querySelectorAll('.list-item');
    const normalizedSearch = normalizeText(searchTerm);

    // Filter grid view
    categories.forEach(card => {
        const categoryName = card.dataset.categoryName;
        const normalizedCategoryName = normalizeText(categoryName);
        const shouldShow = normalizedCategoryName.includes(normalizedSearch) || 
                          categoryName.toLowerCase().includes(searchTerm.toLowerCase());
        
        if (shouldShow) {
            card.style.display = '';
            card.style.animation = 'fadeIn 0.3s ease';
        } else {
            card.style.display = 'none';
        }
    });

    // Filter list view
    listItems.forEach(item => {
        const categoryName = item.dataset.categoryName;
        const normalizedCategoryName = normalizeText(categoryName);
        const shouldShow = categoryName && (normalizedCategoryName.includes(normalizedSearch) || 
                          categoryName.toLowerCase().includes(searchTerm.toLowerCase()));
        
        if (shouldShow) {
            item.style.display = '';
            item.style.animation = 'fadeIn 0.3s ease';
        } else {
            item.style.display = 'none';
        }
    });

    // Show no results message if needed
    const visibleCategories = document.querySelectorAll('.category-card[style=""], .category-card:not([style])');
    const visibleListItems = document.querySelectorAll('.list-item[style=""], .list-item:not([style])');
    const noResults = document.getElementById('noResults');
    
    const hasVisibleItems = visibleCategories.length > 0 || visibleListItems.length > 0;
    
    if (!hasVisibleItems && searchTerm.trim() !== '') {
        if (!noResults) {
            const noResultsDiv = document.createElement('div');
            noResultsDiv.id = 'noResults';
            noResultsDiv.className = 'empty-state';
            noResultsDiv.innerHTML = `
                <div class="empty-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h3>Arama sonucu bulunamadı</h3>
                <p>"${searchTerm}" için kategori bulunamadı. Farklı bir arama terimi deneyin.</p>
            `;
            
            // Add to currently visible view
            const gridView = document.querySelector('.categories-grid');
            const listView = document.querySelector('.categories-list');
            
            if (gridView && !gridView.classList.contains('hidden')) {
                gridView.appendChild(noResultsDiv);
            } else if (listView && !listView.classList.contains('hidden')) {
                listView.appendChild(noResultsDiv);
            }
        }
    } else if (noResults) {
        noResults.remove();
    }
}

function toggleView(view) {
    const viewButtons = document.querySelectorAll('.view-btn');
    const gridView = document.querySelector('.categories-grid');
    const listView = document.querySelector('.categories-list');

    // Save view preference
    localStorage.setItem('categoryView', view);

    // Update active button
    viewButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.view === view);
    });

    // Toggle views - Remove hidden class first, then set display
    if (view === 'grid') {
        if (gridView) {
            gridView.classList.remove('hidden');
            gridView.style.display = 'grid';
        }
        if (listView) {
            listView.style.display = 'none';
            listView.classList.add('hidden');
        }
    } else {
        if (gridView) {
            gridView.style.display = 'none';
            gridView.classList.add('hidden');
        }
        if (listView) {
            listView.classList.remove('hidden');
            listView.style.display = 'block';
        }
    }
}

function toggleDropdown(button) {
    const dropdown = button.nextElementSibling;
    const isCurrentlyOpen = dropdown.classList.contains('show');
    
    // Close all dropdowns first
    closeAllDropdowns();
    
    // Toggle current dropdown
    if (!isCurrentlyOpen) {
        dropdown.classList.add('show');
    }
}

function closeAllDropdowns() {
    const dropdowns = document.querySelectorAll('.dropdown-menu');
    dropdowns.forEach(dropdown => {
        dropdown.classList.remove('show');
    });
}

function showEditModal(categoryId, categoryName, categoryDescription) {
    console.log('🚀 showEditModal çağrıldı:', { categoryId, categoryName, categoryDescription });
    
    // First close all dropdowns
    closeAllDropdowns();
    console.log('✅ Dropdown\'lar kapatıldı');
    
    const modal = document.getElementById('quickEditModal');
    if (!modal) {
        console.error('❌ Modal bulunamadı');
        return;
    }
    console.log('✅ Modal bulundu:', modal);
    
    // Set form values
    const idInput = document.getElementById('editCategoryId');
    const nameInput = document.getElementById('editCategoryName');
    const descInput = document.getElementById('editCategoryDescription');
    
    if (!idInput || !nameInput || !descInput) {
        console.error('❌ Form elementleri bulunamadı:', { idInput, nameInput, descInput });
        return;
    }
    
    idInput.value = categoryId;
    nameInput.value = categoryName;
    descInput.value = categoryDescription || '';
    console.log('✅ Form değerleri ayarlandı');
    
    // Show modal with proper centering using the new .show class
    modal.style.display = 'flex';
    modal.classList.add('show');
    console.log('✅ Modal gösterildi ve ortaya hizalandı');
    
    // Focus on name input
    setTimeout(() => {
        nameInput.focus();
        console.log('✅ Input focus edildi');
    }, 100);
}

function closeEditModal() {
    console.log('🔒 closeEditModal çağrıldı');
    const modal = document.getElementById('quickEditModal');
    if (modal) {
        modal.classList.remove('show');
        modal.style.display = 'none';
        console.log('✅ Modal kapatıldı');
    }
    document.getElementById('quickEditForm').reset();
}

function submitQuickEdit(event) {
    console.log('📝 submitQuickEdit çağrıldı');
    event.preventDefault();
    
    const form = document.getElementById('quickEditForm');
    const formData = new FormData();
    
    const categoryId = document.getElementById('editCategoryId').value;
    const categoryName = document.getElementById('editCategoryName').value;
    const categoryDescription = document.getElementById('editCategoryDescription').value;
    
    console.log('📝 Form verileri:', { categoryId, categoryName, categoryDescription });
    
    formData.append('Id', categoryId);
    formData.append('Name', categoryName);
    formData.append('Description', categoryDescription);
    
    // Add anti-forgery token
    const token = document.querySelector('input[name="__RequestVerificationToken"]');
    if (token) {
        formData.append('__RequestVerificationToken', token.value);
        console.log('✅ Anti-forgery token eklendi');
    } else {
        console.error('❌ Anti-forgery token bulunamadı');
    }

    console.log('🌐 API çağrısı yapılıyor...');
    
    fetch('/Category/QuickEdit', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        console.log('🌐 API yanıtı alındı:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('📊 API yanıt verisi:', data);
        
        if (data.success) {
            alert('✅ Kategori başarıyla güncellendi!');
            closeEditModal();
            setTimeout(() => {
                location.reload();
            }, 500);
        } else {
            alert('❌ ' + (data.message || 'Güncelleme işlemi başarısız!'));
        }
    })
    .catch(error => {
        console.error('❌ API hatası:', error);
        alert('❌ Kategori güncellenirken hata oluştu!');
    });
}

function confirmDelete(categoryName) {
    return confirm(`"${categoryName}" kategorisini silmek istediğinizden emin misiniz?\\n\\nBu işlem geri alınamaz.`);
}

function refreshCategories() {
    const refreshBtn = document.querySelector('.btn-refresh');
    const icon = refreshBtn.querySelector('i');
    
    // Add loading animation
    icon.classList.add('fa-spin');
    refreshBtn.disabled = true;
    
    // Simulate refresh
    setTimeout(() => {
        location.reload();
    }, 500);
}
</script>

@Html.AntiForgeryToken()
