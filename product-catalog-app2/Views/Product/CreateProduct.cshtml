@model product_catalog_app.src.models.Product

@{
    ViewData["Title"] = "Ürün Ekle";
    
    // Header için parametreler - Premium header ile stats
    ViewBag.HeaderType = "premium";
    ViewBag.HeaderTitle = "Yeni Ürün Ekle";
    ViewBag.HeaderSubtitle = "Detaylı ürün bilgilerini girip XML export için ürün ekleyin";
    ViewBag.HeaderIcon = "fas fa-plus-circle";
    ViewBag.HeaderStats = new[] {
        new { Type = "primary", Icon = "fas fa-cube", Value = "Yeni", Label = "Ürün Ekle" },
        new { Type = "secondary", Icon = "fas fa-file-export", Value = "XML", Label = "Export Hazır" }
    };
    
    // Form parametresi
    ViewBag.IsEditMode = false;
}

@section Styles {
    <!-- Form stil modülü -->
    @await Html.PartialAsync("_ProductFormStyles")
}

@await Html.PartialAsync("_ProductFormLayout", Model)

@section Scripts {
    <!-- Form script modülü -->
    @await Html.PartialAsync("_ProductFormScripts")
    
    @* PROFESSIONAL OVERRIDE - PRODUCTION READY WITH UNSAVED CHANGES *@
    <script>
    (function() {
        'use strict';
        
        // Professional form initialization with unsaved changes integration
        document.addEventListener('DOMContentLoaded', function() {
            // Suppress amateur console logs
            const originalConsole = {
                log: console.log,
                warn: console.warn
            };
            
            console.log = function(...args) {
                const message = args.join(' ');
                // Block amateur logging patterns
                if (message.includes('Section') && (message.includes('Content found') || message.includes('Header found'))) return;
                if (message.includes('collapsible section sayısı')) return;
                if (message.includes('Initial state for')) return;
                if (message.includes('collapsible olarak ayarlandı')) return;
                if (message.includes('Rich Text Editor') && message.includes('başarıyla')) return;
                
                // Allow professional logs only
                originalConsole.log.apply(console, args);
            };
            
            console.warn = function(...args) {
                const message = args.join(' ');
                if (message.includes('initialization failed')) return;
                if (message.includes('not found, skipping')) return;
                
                originalConsole.warn.apply(console, args);
            };
            
            // Professional init with unsaved changes support
            setTimeout(() => {
                console.log('✅ ProductForm: Ready with UnsavedChanges protection');
                
                // Add form container class for visual indicators
                const formContainer = document.querySelector('.product-form-container');
                if (formContainer) {
                    formContainer.classList.add('form-container');
                }
            }, 100);
        });
        
        // Block any amateur function overrides
        Object.defineProperty(window, 'initializeProductForm', {
            value: function() {
                // Professional version handles everything silently
                return true;
            },
            writable: false,
            configurable: false
        });
    })();
    </script>
}

