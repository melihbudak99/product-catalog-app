@{
    ViewData["Title"] = "Dışa/İçe Aktarma Yönetimi";
    Layout = "_Layout";
    
    // Header için parametreler
    ViewBag.HeaderType = "xml-manager";
    ViewBag.HeaderTitle = "Dışa/İçe Aktarma Yönetimi";
    ViewBag.HeaderSubtitle = "Ürünlerinizi çeşitli formatlarda dışa aktarın veya içe aktarın";
    ViewBag.HeaderIcon = "📊";
}

<div class="container xml-manager-page">
    <!-- Ortak Header Component -->
    @await Html.PartialAsync("_PageHeader")

    <!-- Statistics -->
    <div class="stats-section">
        <h2>📈 İstatistikler</h2>
        <div class="stats-grid" id="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">📦</div>
                <div class="stat-info">
                    <div class="stat-value" id="total-products">-</div>
                    <div class="stat-label">Toplam Ürün</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">✅</div>
                <div class="stat-info">
                    <div class="stat-value" id="active-products">-</div>
                    <div class="stat-label">Aktif Ürün</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🏷️</div>
                <div class="stat-info">
                    <div class="stat-value" id="active-categories">-</div>
                    <div class="stat-label">Aktif Kategoriler</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">📥</div>
                <div class="stat-info">
                    <div class="stat-value" id="archived-products">-</div>
                    <div class="stat-label">Arşiv Ürün</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Section -->
    <div class="main-section">
        <div class="section-header">
            <h2>🔽 Dışa Aktarma</h2>
            <p>Ürünlerinizi seçtiğiniz sütunlarla çeşitli formatlarda indirebilirsiniz</p>
        </div>

        <!-- Export Filters -->
        <div class="export-filters">
            <div class="filter-group">
                <label for="export-status">Durumu:</label>
                <select id="export-status" class="form-select">
                    <option value="all">Tüm Ürünler</option>
                    <option value="active">Aktif Ürünler</option>
                    <option value="archived">Arşiv Ürünler</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="export-category">Kategori:</label>
                <select id="export-category" class="form-select">
                    <option value="">Tüm Kategoriler</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="export-brand">Marka:</label>
                <select id="export-brand" class="form-select">
                    <option value="">Tüm Markalar</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="export-search">Arama:</label>
                <input type="text" id="export-search" class="form-input" placeholder="Ürün adı, SKU, açıklama...">
            </div>
        </div>

        <!-- Column Selection Section -->
        <div class="column-selection-section">
            <div class="section-header">
                <div>
                    <h3>📋 Sütun Seçimi</h3>
                    <p>Hangi sütunların dışa aktarılacağını seçin</p>
                </div>
                <div class="column-actions">
                    <div class="manual-actions">
                        <button class="btn btn-secondary btn-sm" data-action="select-all-columns">Tümünü Seç</button>
                        <button class="btn btn-secondary btn-sm" data-action="deselect-all-columns">Hiçbirini Seçme</button>
                        <button class="btn btn-secondary btn-sm" data-action="select-default-columns">Varsayılan Seçim</button>
                    </div>
                </div>
            </div>

            <div class="column-categories" id="column-categories">
                <!-- Sütun kategorileri buraya yüklenecek -->
            </div>
        </div>

        <!-- Description Options -->
        <div class="description-options">
            <h4>📄 Açıklama Seçenekleri</h4>
            <div class="option-group">
                <label class="checkbox-label">
                    <input type="checkbox" id="include-html-description" checked>
                    <span>HTML formatında açıklama dahil et</span>
                </label>
            </div>
            <div class="option-group">
                <label class="checkbox-label">
                    <input type="checkbox" id="include-plain-text-description" checked>
                    <span>Düz metin formatında açıklama dahil et</span>
                </label>
            </div>
        </div>

        <!-- Export Buttons -->
        <div class="export-buttons">
            <div class="format-group">
                <h3>📄 XML Format</h3>
                <p>Standart XML formatında, seçilen sütunlarla</p>
                <button class="btn btn-primary" onclick="exportWithColumns('xml')">
                    <i class="icon">📄</i>
                    XML İndir
                </button>
            </div>

            <div class="format-group">
                <h3>📋 JSON Format</h3>
                <p>Modern JSON formatında, seçilen sütunlarla</p>
                <button class="btn btn-primary" onclick="exportWithColumns('json')">
                    <i class="icon">📋</i>
                    JSON İndir
                </button>
            </div>

            <div class="format-group">
                <h3>📊 CSV Format</h3>
                <p>Virgülle ayrılmış değerler, seçilen sütunlarla</p>
                <button class="btn btn-primary" onclick="exportWithColumns('csv')">
                    <i class="icon">📊</i>
                    CSV İndir
                </button>
            </div>

            <div class="format-group">
                <h3>📈 Excel Format</h3>
                <p>Microsoft Excel formatında, seçilen sütunlarla</p>
                <button class="btn btn-primary" onclick="exportWithColumns('xlsx')">
                    <i class="icon">📈</i>
                    Excel İndir
                </button>
            </div>
        </div>
    </div>

    <!-- Import Section -->
    <div class="main-section">
        <div class="section-header">
            <h2>🔼 İçe Aktarma</h2>
            <p>Ürün dosyalarını sisteme yükleyebilirsiniz</p>
        </div>

        <!-- Import Options -->
        <div class="import-options">
            <div class="option-group">
                <input type="checkbox" id="update-existing" class="form-checkbox">
                <label for="update-existing">Mevcut ürünleri güncelle (ID'ye göre)</label>
            </div>
        </div>

        <!-- Import Formats -->
        <div class="import-formats">
            <div class="format-group">
                <h3>📄 XML Dosyası</h3>
                <div class="file-upload-area" id="xml-upload">
                    <input type="file" id="xml-file" accept=".xml" class="file-input">
                    <label for="xml-file" class="file-label">
                        <i class="icon">📁</i>
                        <span>XML dosyası seçin</span>
                    </label>
                </div>
                <button class="btn btn-import" onclick="importData('xml')">
                    📄 XML İçe Aktar
                </button>
            </div>

            <div class="format-group">
                <h3>📋 JSON Dosyası</h3>
                <div class="file-upload-area" id="json-upload">
                    <input type="file" id="json-file" accept=".json" class="file-input">
                    <label for="json-file" class="file-label">
                        <i class="icon">📁</i>
                        <span>JSON dosyası seçin veya sürükleyip bırakın</span>
                    </label>
                </div>
                <button class="btn btn-import" onclick="importData('json')">
                    📋 JSON İçe Aktar
                </button>
            </div>

            <div class="format-group">
                <h3>📊 CSV Dosyası</h3>
                <div class="file-upload-area" id="csv-upload">
                    <input type="file" id="csv-file" accept=".csv" class="file-input">
                    <label for="csv-file" class="file-label">
                        <i class="icon">📁</i>
                        <span>CSV dosyası seçin veya sürükleyip bırakın</span>
                    </label>
                </div>
                <button class="btn btn-import" onclick="importData('csv')">
                    📊 CSV İçe Aktar
                </button>
            </div>

            <div class="format-group">
                <h3>📈 Excel Dosyası</h3>
                <div class="file-upload-area" id="excel-upload">
                    <input type="file" id="excel-file" accept=".xlsx,.xls" class="file-input">
                    <label for="excel-file" class="file-label">
                        <i class="icon">📁</i>
                        <span>Excel dosyası seçin veya sürükleyip bırakın</span>
                    </label>
                </div>
                <button class="btn btn-import" onclick="importData('excel')">
                    📈 Excel İçe Aktar
                </button>
            </div>
        </div>
    </div>

    <!-- Progress Section -->
    <div class="progress-section hidden" id="progress-section">
        <div class="progress-header">
            <h3>İşlem Durumu</h3>
            <button class="btn btn-secondary" onclick="hideProgress()">Gizle</button>
        </div>
        <div class="progress-content">
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
            <div class="progress-text" id="progress-text">İşlem hazırlanıyor...</div>
        </div>
    </div>

    <!-- Help Section -->
    <div class="help-section">
        <h2>❓ Yardım</h2>
        <div class="help-content">
            <div class="help-item">
                <h4>📄 XML Format</h4>
                <p>Standart XML formatında, tüm ürün verilerini içerir. Diğer sistemlerle entegrasyon için idealdir.</p>
            </div>
            <div class="help-item">
                <h4>📋 JSON Format</h4>
                <p>Modern JSON formatında, API entegrasyonları ve web uygulamaları için idealdir.</p>
            </div>
            <div class="help-item">
                <h4>📊 CSV Format</h4>
                <p>Virgülle ayrılmış değerler formatı. Excel'de açılabilir, basit veri işleme için uygundur.</p>
            </div>
            <div class="help-item">
                <h4>📈 Excel Format</h4>
                <p>Microsoft Excel formatında, gelişmiş analiz ve raporlama için idealdir.</p>
            </div>
        </div>
    </div>
</div>

<style>
/* XmlManager Page Specific Styles - Optimized */
/* 
   All common styles like .btn, .alert, .form-control moved to main.css
   This file contains only unique XML manager specific styles
*/

/* Utility Classes */
.hidden {
    display: none !important;
}

.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    min-width: 120px;
    justify-content: center;
}

.btn-primary {
    background: #4CAF50;
    color: white;
}

.btn-primary:hover {
    background: #45a049;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

.btn-back {
    background: rgba(255, 255, 255, 0.15);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    font-weight: 500;
    transition: all 0.3s ease;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.btn-back:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.4);
    text-decoration: none;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
}

.btn-import {
    background: #007bff;
    color: white;
}

.btn-import:hover {
    background: #0056b3;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
}

.btn-secondary {
    background: var(--secondary-color);
    color: var(--white);
}

.btn-secondary:hover {
    background: #5a6268;
}

/* Alert Styles */
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 10px;
    position: relative;
}

.alert-success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.alert-close {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: inherit;
}

/* Stats Section */
.stats-section {
    margin-bottom: 30px;
    padding: 20px;
    background: linear-gradient(135deg, #3d4d5c 0%, #1e2c39 100%);
    border-radius: 12px;
    border: 1px solid #dee2e6;
}

.stats-section h2 {
    margin-bottom: 20px;
    color: #ffffff;
    font-size: 1.5em;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    display: flex;
    align-items: center;
    gap: 15px;
    transition: transform 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.stat-icon {
    font-size: 2.5em;
}

.stat-value {
    font-size: 2em;
    font-weight: bold;
    color: #6c757d;
}

.stat-label {
    font-size: 0.9em;
    color: #6c757d;
}

/* Main Sections */
.main-section {
    margin-bottom: 30px;
    padding: 20px;
    background: white;
    border-radius: 12px;
    border: 1px solid #dee2e6;
}

.section-header {
    margin-bottom: 20px;
}

.section-header h2 {
    margin-bottom: 10px;
    color: #495057;
    font-size: 1.8em;
}

.section-header p {
    color: #6c757d;
    font-size: 1.1em;
}

/* Export Filters */
.export-filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 8px;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.filter-group label {
    font-weight: 600;
    color: #495057;
}

.form-select, .form-input {
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 1em;
    transition: border-color 0.3s ease;
}

.form-select:focus, .form-input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

/* Export/Import Buttons */
.export-buttons, .import-formats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.format-group {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    text-align: center;
    transition: transform 0.3s ease;
}

.format-group:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

/* Column Selection Styles */
.column-selection-section {
    margin-bottom: 30px;
}

.column-actions {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
}

/* High specificity selectors to override global styles naturally */
.container.xml-manager-page .manual-actions {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    visibility: visible;
    opacity: 1;
}

/* Even higher specificity for button styling */
.container.xml-manager-page .manual-actions .btn.btn-secondary {
    color: #ffffff;
    background-color: #6c757d;
    border-color: #6c757d;
    padding: 6px 12px;
    font-size: 0.875rem;
    border-radius: 4px;
    display: inline-flex;
    visibility: visible;
    opacity: 1;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease-in-out;
}

.container.xml-manager-page .manual-actions .btn.btn-secondary:hover {
    color: #ffffff;
    background-color: #5a6268;
    border-color: #545b62;
    transform: translateY(-1px);
}

.column-categories {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background: white;
}

.column-category {
    border-bottom: 1px solid #e9ecef;
}

.column-category:last-child {
    border-bottom: none;
}

.category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background: #00000011;
    transition: background-color 0.3s ease;
}

.category-header:hover {
    background: #e9ecef;
}

.category-header h4 {
    margin: 0;
    color: #495057;
    font-size: 1.1em;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 10px;
}

.category-title {
    cursor: pointer;
    user-select: none;
    flex: 1;
}

.category-title:hover {
    color: #007bff;
}

.category-checkbox {
    margin-right: 8px;
    transform: scale(1.2);
    accent-color: #007bff;
}

.toggle-icon {
    font-size: 0.8em;
    color: #6c757d;
    transition: transform 0.3s ease;
    cursor: pointer;
    padding: 5px;
    user-select: none;
}

.toggle-icon:hover {
    color: #007bff;
    transform: scale(1.1);
}

.category-columns {
    padding: 0;
}

.column-item {
    display: flex;
    flex-direction: column;
    padding: 12px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s ease;
}

.column-item:last-child {
    border-bottom: none;
}

.column-item:hover {
    background: #f8f9fa;
}

.column-label {
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
    margin: 0;
}

.column-label input[type="checkbox"],
.column-checkbox {
    margin-right: 8px;
    transform: scale(1.1);
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color: #007bff;
}

.column-name {
    flex: 1;
    font-weight: 500;
    color: #495057;
}

.required-badge {
    background: #dc3545;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.75em;
    font-weight: 500;
    margin-left: auto;
}

.column-description {
    color: #6c757d;
    font-size: 0.85em;
    margin-top: 5px;
    margin-left: 30px;
    line-height: 1.3;
}

/* Description Options */
.description-options {
    margin-bottom: 25px;
    padding: 15px;
    background: #e7f3ff;
    border-radius: 8px;
    border: 1px solid #b8daff;
}

.description-options h4 {
    margin-bottom: 15px;
    color: #495057;
    font-size: 1.1em;
}

.option-group {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.checkbox-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin: 0;
}

/* Higher specificity for consistent checkbox sizing */
.container.xml-manager-page .checkbox-label input[type="checkbox"],
.container.xml-manager-page input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
    accent-color: #007bff;
    transform: none;
}

.format-group {
    background: white;
    padding: 25px;
    border-radius: 12px;
    border: 2px solid #e9ecef;
    text-align: center;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.format-group h3 {
    margin-bottom: 10px;
    color: #495057;
    font-size: 1.2em;
}

.format-group p {
    margin-bottom: 15px;
    color: #6c757d;
    font-size: 0.9em;
}

/* Import Options */
.import-options {
    margin-bottom: 20px;
    padding: 15px;
    background: #e7f3ff;
    border-radius: 8px;
    border: 1px solid #b8daff;
}

.option-group {
    display: flex;
    align-items: center;
    gap: 10px;
}

.form-checkbox {
    width: 18px;
    height: 18px;
    cursor: pointer;
}

/* File Upload */
.file-upload-area {
    margin-bottom: 15px;
    position: relative;
}

.file-input {
    position: absolute;
    opacity: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
}

.file-label {
    display: block;
    padding: 30px 20px;
    border: 2px dashed #007bff;
    border-radius: 8px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
}

.file-label:hover {
    border-color: #0056b3;
    background: #f8f9ff;
}

.file-label .icon {
    font-size: 2em;
    display: block;
    margin-bottom: 10px;
}

.file-label span {
    font-size: 1.1em;
    color: #007bff;
    font-weight: 500;
}

/* Drag and Drop Styles */
.file-upload-area.drag-over .file-label {
    border-color: #28a745;
    background: #d4edda;
    border-style: solid;
    transform: scale(1.02);
}

.file-upload-area.drag-over .file-label .icon {
    color: #28a745;
}

.file-upload-area.drag-over .file-label span {
    color: #28a745;
    font-weight: bold;
}

.drag-feedback {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 0.9em;
    font-weight: 500;
    z-index: 10;
    pointer-events: none;
}

.drag-feedback.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.drag-feedback.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* Enhanced hover effects for drag and drop */
.file-upload-area:hover .file-label {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,123,255,0.15);
}

/* Progress Section */
.progress-section {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.progress-content {
    background: white;
    padding: 30px;
    border-radius: 12px;
    min-width: 400px;
    text-align: center;
}

.progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.progress-bar {
    width: 100%;
    height: 10px;
    background: #e9ecef;
    border-radius: 5px;
    overflow: hidden;
    margin-bottom: 15px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #0056b3);
    border-radius: 5px;
    transition: width 0.3s ease;
    width: 0%;
}

.progress-text {
    color: #495057;
    font-weight: 500;
}

/* Help Section */
.help-section {
    margin-top: 30px;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 12px;
    border: 1px solid #dee2e6;
}

.help-section h2 {
    margin-bottom: 20px;
    color: #495057;
    font-size: 1.5em;
}

.help-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.help-item {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.help-item h4 {
    margin-bottom: 10px;
    color: #495057;
    font-size: 1.1em;
}

.help-item p {
    color: #6c757d;
    font-size: 0.9em;
    line-height: 1.4;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .page-header {
        flex-direction: column;
        text-align: center;
        gap: 20px;
        padding: 25px 20px;
    }

    .header-content h1 {
        font-size: 2em;
    }

    .header-content p {
        font-size: 1em;
    }

    .export-filters {
        grid-template-columns: 1fr;
    }

    .export-buttons, .import-formats {
        grid-template-columns: 1fr;
    }

    .stats-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }

    .help-content {
        grid-template-columns: 1fr;
    }
}
</style>

<!-- Progress Indicator -->
<script src="~/js/progress.js?v=2.6.0&t=@DateTime.UtcNow.Ticks"></script>
<script src="~/js/progress.js?v=2.6.0&t=@DateTime.UtcNow.Ticks"></script>

<script>
// Global variables
let categories = [];
let brands = [];
let availableColumns = [];
let selectedColumns = [];

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Prevent multiple initialization
    if (window.xmlManagerInitialized) {
        console.log('⚠️ XmlManager already initialized, skipping...');
        return;
    }
    window.xmlManagerInitialized = true;
    
    console.log('✅ XmlManager page loaded');
    
    // Immediately ensure manual-actions are visible (first priority)
    ensureManualActionsVisibility();
    
    // Ensure consistent checkbox styling
    ensureConsistentCheckboxStyling();
    
    // Setup event delegation for manual-actions buttons
    setupManualActionsEventDelegation();
    
    // Initialize page components
    loadStats();
    loadCategories();
    loadBrands();
    loadColumns();
    setupFileInputs();
});

// Setup event delegation for manual-actions buttons
function setupManualActionsEventDelegation() {
    console.log('🔧 Setting up manual-actions event delegation...');
    
    // Use event delegation for all manual-actions buttons
    document.addEventListener('click', function(e) {
        const target = e.target.closest('[data-action]');
        if (!target) return;
        
        const action = target.dataset.action;
        
        // Only handle manual-actions related actions
        switch (action) {
            case 'select-all-columns':
                e.preventDefault();
                console.log('🔧 Select all columns action triggered');
                selectAllColumns();
                break;
                
            case 'deselect-all-columns':
                e.preventDefault();
                console.log('🔧 Deselect all columns action triggered');
                deselectAllColumns();
                break;
                
            case 'select-default-columns':
                e.preventDefault();
                console.log('🔧 Select default columns action triggered');
                selectDefaultColumns();
                break;
        }
    });
    
    // Ensure manual-actions buttons are visible
    ensureManualActionsVisibility();
    
    console.log('✅ Manual-actions event delegation ready');
}

// Ensure manual-actions visibility
function ensureManualActionsVisibility() {
    const manualActions = document.querySelectorAll('.manual-actions');
    manualActions.forEach(element => {
        element.style.display = 'flex';
        element.style.visibility = 'visible';
        element.style.opacity = '1';
        element.style.gap = '10px';
        element.style.flexWrap = 'wrap';
    });
    
    // Also ensure the buttons inside are visible with specific styles
    const buttons = document.querySelectorAll('.manual-actions .btn');
    buttons.forEach(button => {
        button.style.display = 'inline-flex';
        button.style.visibility = 'visible';
        button.style.opacity = '1';
        button.style.alignItems = 'center';
        button.style.justifyContent = 'center';
        button.style.padding = '6px 12px';
        button.style.fontSize = '0.875rem';
        button.style.borderRadius = '4px';
        button.style.transition = 'all 0.2s ease-in-out';
    });
    
    // Specifically handle btn-secondary styles (without !important)
    const secondaryButtons = document.querySelectorAll('.manual-actions .btn-secondary');
    secondaryButtons.forEach(button => {
        button.style.color = '#fff';
        button.style.backgroundColor = '#6c757d';
        button.style.borderColor = '#6c757d';
    });
    
    console.log('✅ Manual-actions visibility ensured with clean styling');
}

// Ensure consistent checkbox styling across all elements
function ensureConsistentCheckboxStyling() {
    const allCheckboxes = document.querySelectorAll('.container.xml-manager-page input[type="checkbox"]');
    
    allCheckboxes.forEach(checkbox => {
        // Use direct style assignment for consistency
        checkbox.style.width = '18px';
        checkbox.style.height = '18px';
        checkbox.style.accentColor = '#007bff';
        checkbox.style.transform = 'none';
        checkbox.style.cursor = 'pointer';
    });
    
    console.log('✅ Consistent checkbox styling applied to', allCheckboxes.length, 'checkboxes using high specificity');
}

// Load available columns
async function loadColumns() {
    // Logging optimized for production
    try {
        console.log('Making API request to load columns...');
        const response = await fetch('/api/ExportImport/columns?t=' + Date.now());
        console.log('API response received:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('API response data:', data);
        
        if (data.success && data.categories) {
            availableColumns = data.categories;
            selectedColumns = data.defaultSelected || [];
            console.log('Loaded columns:', availableColumns);
            console.log('Sample category structure:', availableColumns[0]);
            console.log('Default selected:', selectedColumns);
            renderColumnCategories();
        } else {
            throw new Error(data.message || 'Invalid response format');
        }
    } catch (error) {
        console.error('Sütunlar yüklenemedi:', error);
        showAlert('error', `Sütun bilgileri yüklenemedi: ${error.message}`);
        
        // Fallback: show message to user
        const container = document.getElementById('column-categories');
        container.innerHTML = `
            <div class="alert alert-error">
                <p>Sütun bilgileri yüklenemedi. Lütfen sayfayı yenileyin veya yönetici ile iletişime geçin.</p>
                <button onclick="loadColumns()" class="btn btn-secondary btn-sm">Tekrar Dene</button>
            </div>
        `;
    }
}

// Render column categories
function renderColumnCategories() {
    const container = document.getElementById('column-categories');
    container.innerHTML = '';
    
    if (!availableColumns || !Array.isArray(availableColumns)) {
        console.error('availableColumns is not a valid array:', availableColumns);
        return;
    }
    
    // Kategori sıralaması
    const categoryOrder = [
        'Tarihler',
        'Statü', 
        'Temel Bilgiler',
        'Açıklama ve Notlar',
        'Genel Özellikler',
        'Ürün Özellikleri',
        'Pazaryeri Barkodları',
        'Logo Barkodları',
        'Ürün Görselleri',
        'Pazaryeri Görselleri',
        'Videolar'
    ];
    
    // Kategorileri belirtilen sırayla render et
    categoryOrder.forEach(categoryName => {
        const categoryData = availableColumns.find(cat => 
            (cat.category || cat.Category) === categoryName
        );
        
        if (!categoryData) {
            console.warn(`Category not found: ${categoryName}`);
            return;
        }
        
        const columns = categoryData.columns || categoryData.Columns;
        
        if (!columns || !Array.isArray(columns)) {
            console.error(`Columns array missing or invalid in category ${categoryName}:`, categoryData);
            return;
        }
        
        console.log(`Successfully processed category: ${categoryName} with ${columns.length} columns`);
        
        const categoryId = categoryName.replace(/\s+/g, '-');
        
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'column-category';
        
        categoryDiv.innerHTML = `
            <div class="category-header">
                <h4>
                    <input type="checkbox" class="category-checkbox" onchange="toggleCategorySelection('${categoryName}', this.checked)"> 
                    <span class="category-title" onclick="toggleCategory('${categoryName}')">${categoryName}</span>
                    <span class="toggle-icon" onclick="toggleCategory('${categoryName}')">▼</span>
                </h4>
            </div>
            <div class="category-columns" id="category-${categoryId}" style="display: block;">
                ${columns.map(column => {
                    if (!column || typeof column !== 'object') {
                        console.warn('Invalid column data:', column);
                        return '';
                    }
                    
                    // Handle case-insensitive property names
                    const propertyName = column.PropertyName || column.propertyName;
                    const displayName = column.DisplayName || column.displayName;
                    const isRequired = column.IsRequired || column.isRequired || false;
                    const description = column.Description || column.description;
                    
                    if (!propertyName || !displayName) {
                        console.warn('Column missing required properties:', column);
                        return '';
                    }
                    
                    return `
                        <div class="column-item" data-category="${categoryName}">
                            <label class="column-label">
                                <input type="checkbox" 
                                       class="column-checkbox"
                                       value="${propertyName}" 
                                       ${selectedColumns.includes(propertyName) ? 'checked' : ''}
                                       ${isRequired ? 'disabled' : ''}
                                       onchange="updateSelectedColumns()">
                                <span class="checkmark"></span>
                                <span class="column-name">${displayName}</span>
                                ${isRequired ? '<span class="required-badge">Gerekli</span>' : ''}
                            </label>
                            ${description ? `<small class="column-description">${description}</small>` : ''}
                        </div>
                    `;
                }).filter(html => html !== '').join('')}
            </div>
        `;
        
        container.appendChild(categoryDiv);
    });
    
    // Apply default selection after all categories are rendered
    console.log('All categories rendered, applying default selection...');
    setTimeout(() => {
        applyDefaultSelection();
        // Ensure consistent checkbox styling after rendering
        ensureConsistentCheckboxStyling();
        // Re-ensure manual actions visibility
        ensureManualActionsVisibility();
    }, 100); // Small delay to ensure DOM is fully updated
}

// Apply default column selection based on pre-defined list
function applyDefaultSelection() {
    const defaultColumns = [
        'EanCode', 'Id', 'Name', 'SKU', 'Brand', 'Category', 'Desi',
        'TrendyolBarcode', 'HepsiburadaBarcode', 'HepsiburadaSellerStockCode',
        'KoctasBarcode', 'KoctasIstanbulBarcode', 'HepsiburadaTedarikBarcode',
        'PttAvmBarcode', 'PazaramaBarcode', 'HaceyapiBarcode', 'AmazonBarcode',
        'N11CatalogId', 'N11ProductCode', 'SpareBarcode1', 'SpareBarcode2',
        'SpareBarcode3', 'SpareBarcode4'
    ];
    
    let selectedCount = 0;
    const checkboxes = document.querySelectorAll('#column-categories .column-checkbox');
    
    checkboxes.forEach(cb => {
        if (!cb.disabled && defaultColumns.includes(cb.value)) {
            cb.checked = true;
            selectedCount++;
        }
    });
    
    console.log(`Applied default selection: ${selectedCount} columns selected`);
    updateSelectedColumns();
}

// Toggle category visibility
function toggleCategory(categoryName) {
    if (!categoryName) {
        console.error('Invalid category name:', categoryName);
        return;
    }
    
    const categoryId = 'category-' + categoryName.replace(/\s+/g, '-');
    const categoryElement = document.getElementById(categoryId);
    
    if (!categoryElement) {
        console.error('Category element not found:', categoryId);
        return;
    }
    
    // Find the toggle icon in the same header
    const categoryHeader = categoryElement.previousElementSibling;
    const toggleIcon = categoryHeader.querySelector('.toggle-icon');
    
    if (categoryElement.style.display === 'none') {
        categoryElement.style.display = 'block';
        if (toggleIcon) toggleIcon.textContent = '▼';
    } else {
        categoryElement.style.display = 'none';
        if (toggleIcon) toggleIcon.textContent = '▶';
    }
}

// Update selected columns
function updateSelectedColumns() {
    const checkboxes = document.querySelectorAll('#column-categories .column-checkbox:checked');
    selectedColumns = Array.from(checkboxes).map(cb => cb.value);
    
    // Update category checkboxes based on their columns
    updateCategoryCheckboxes();
}

// Toggle category selection
function toggleCategorySelection(categoryName, isChecked) {
    const categoryCheckboxes = document.querySelectorAll(`#column-categories .column-item[data-category="${categoryName}"] .column-checkbox:not([disabled])`);
    
    categoryCheckboxes.forEach(cb => {
        cb.checked = isChecked;
    });
    
    updateSelectedColumns();
}

// Update category checkboxes based on their columns
function updateCategoryCheckboxes() {
    const categoryCheckboxes = document.querySelectorAll('#column-categories .category-checkbox');
    
    categoryCheckboxes.forEach(catCb => {
        // Get category name from the category-title span instead of the whole h4
        const categoryTitleSpan = catCb.closest('.category-header').querySelector('.category-title');
        const categoryName = categoryTitleSpan ? categoryTitleSpan.textContent.trim() : '';
        
        if (!categoryName) {
            console.warn('Category name not found');
            return;
        }
        
        const categoryColumns = document.querySelectorAll(`#column-categories .column-item[data-category="${categoryName}"] .column-checkbox:not([disabled])`);
        const checkedColumns = document.querySelectorAll(`#column-categories .column-item[data-category="${categoryName}"] .column-checkbox:checked:not([disabled])`);
        
        if (categoryColumns.length === 0) {
            catCb.indeterminate = false;
            catCb.checked = false;
        } else if (checkedColumns.length === 0) {
            catCb.indeterminate = false;
            catCb.checked = false;
        } else if (checkedColumns.length === categoryColumns.length) {
            catCb.indeterminate = false;
            catCb.checked = true;
        } else {
            catCb.indeterminate = true;
            catCb.checked = false;
        }
    });
}

// Select all columns
function selectAllColumns() {
    const checkboxes = document.querySelectorAll('#column-categories .column-checkbox:not([disabled])');
    checkboxes.forEach(cb => cb.checked = true);
    updateSelectedColumns();
}

// Deselect all columns
function deselectAllColumns() {
    const checkboxes = document.querySelectorAll('#column-categories .column-checkbox:not([disabled])');
    checkboxes.forEach(cb => cb.checked = false);
    updateSelectedColumns();
}

// Select default columns
function selectDefaultColumns() {
    console.log('selectDefaultColumns() called');
    
    // Check if columns are loaded
    const columnContainer = document.getElementById('column-categories');
    if (!columnContainer || columnContainer.children.length === 0) {
        window.notificationSystem.warning('Sütun Yükleme', 'Sütunlar henüz yüklenmedi. Lütfen bekleyin...');
        // Try to load columns first, then apply default selection
        loadColumns().then(() => {
            setTimeout(selectDefaultColumns, 500); // Wait for rendering to complete
        });
        return;
    }
    
    // First, clear all selections
    deselectAllColumns();
    console.log('All columns deselected');
    
    // Define default columns that should be selected
    const defaultColumns = [
        // Temel Bilgiler
        'EanCode',
        'Id', 
        'Name',
        'SKU',
        'Brand',
        'Category',
        
        // Genel Özellikler
        'Desi',
        
        // Pazaryeri Barkodları
        'TrendyolBarcode',
        'HepsiburadaBarcode',
        'HepsiburadaSellerStockCode',
        'KoctasBarcode',
        'KoctasIstanbulBarcode',
        'HepsiburadaTedarikBarcode',
        'PttAvmBarcode',
        'PazaramaBarcode',
        'HaceyapiBarcode',
        'AmazonBarcode',
        'N11CatalogId',
        'N11ProductCode',
        'SpareBarcode1',
        'SpareBarcode2',
        'SpareBarcode3',
        'SpareBarcode4'
    ];
    
    console.log('Default columns to select:', defaultColumns);
    
    // Select checkboxes for default columns
    const checkboxes = document.querySelectorAll('#column-categories .column-checkbox');
    console.log('Found checkboxes:', checkboxes.length);
    
    let selectedCount = 0;
    checkboxes.forEach(cb => {
        if (!cb.disabled && defaultColumns.includes(cb.value)) {
            cb.checked = true;
            selectedCount++;
            console.log('Selected column:', cb.value);
        }
    });
    
    console.log('Total columns selected:', selectedCount);
    updateSelectedColumns();
    
    // Show user feedback
    if (selectedCount > 0) {
        window.notificationSystem.success('Sütun Seçimi', `${selectedCount} varsayılan sütun seçildi`);
    } else {
        window.notificationSystem.warning('Sütun Seçimi', 'Hiçbir varsayılan sütun bulunamadı. Sütunlar yüklendi mi?');
    }
}

// Export with selected columns
async function exportWithColumns(format) {
    if (selectedColumns.length === 0) {
        window.notificationSystem.warning('Dışa Aktarma Hatası', 'Lütfen en az bir sütun seçin');
        return;
    }
    
    const status = document.getElementById('export-status').value;
    const category = document.getElementById('export-category').value;
    const brand = document.getElementById('export-brand').value;
    const search = document.getElementById('export-search').value;
    
    const includeHtmlDescription = document.getElementById('include-html-description').checked;
    const includePlainTextDescription = document.getElementById('include-plain-text-description').checked;
    
    const exportData = {
        status: status,
        category: category,
        brand: brand,
        searchTerm: search,
        selectedColumns: selectedColumns,
        includeHtmlDescription: includeHtmlDescription,
        includePlainTextDescription: includePlainTextDescription,
        includeImageUrls: true,
        includeVideoUrls: true,
        includeMarketplaceBarcodes: true,
        includeSpecialFeatures: true,
        exportFormat: format
    };
    
    showProgress(`${format.toUpperCase()} dosyası hazırlanıyor...`);
    
    try {
        const response = await fetch('/api/ExportImport/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(exportData)
        });
        
        if (!response.ok) {
            throw new Error('Export işlemi başarısız');
        }
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        const timestamp = new Date().toISOString().split('T')[0];
        a.download = `products_${selectedColumns.length}columns_${timestamp}.${format}`;
        a.click();
        window.URL.revokeObjectURL(url);
        
        hideProgress();
        
        // Use modal notification for important export operations
        window.notificationSystem.successModal(
            'Dışa Aktarma Başarılı', 
            `${format.toUpperCase()} dosyası başarıyla indirildi (${selectedColumns.length} sütun)`,
            {
                onConfirm: () => {
                    loadStats(); // Reload stats after successful export
                }
            }
        );
    } catch (error) {
        hideProgress();
        
        // Use critical notification for export errors
        window.notificationSystem.critical(
            'Dışa Aktarma Hatası', 
            `Export işlemi başarısız: ${error.message}`
        );
    }
}

// Load statistics
async function loadStats() {
    try {
        const response = await fetch('/api/ExportImport/stats');
        const data = await response.json();
        
        document.getElementById('total-products').textContent = data.totalProducts;
        document.getElementById('active-products').textContent = data.activeProducts;
        document.getElementById('active-categories').textContent = data.activeCategoriesCount;
        document.getElementById('archived-products').textContent = data.archivedProducts;
        
        categories = data.categories;
        brands = data.brands;
        
        updateCategoryOptions();
        updateBrandOptions();
    } catch (error) {
        console.error('İstatistikler yüklenemedi:', error);
        // Fallback values
        document.getElementById('total-products').textContent = '0';
        document.getElementById('active-products').textContent = '0';
        document.getElementById('active-categories').textContent = '0';
        document.getElementById('archived-products').textContent = '0';
    }
}

// Load categories
async function loadCategories() {
    try {
        const response = await fetch('/api/ExportImport/categories');
        const data = await response.json();
        categories = data;
        updateCategoryOptions();
    } catch (error) {
        console.error('Kategoriler yüklenemedi:', error);
    }
}

// Load brands
async function loadBrands() {
    try {
        const response = await fetch('/api/ExportImport/brands');
        const data = await response.json();
        brands = data;
        updateBrandOptions();
    } catch (error) {
        console.error('Markalar yüklenemedi:', error);
    }
}

// Update category options
function updateCategoryOptions() {
    const categorySelect = document.getElementById('export-category');
    categorySelect.innerHTML = '<option value="">Tüm Kategoriler</option>';
    
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
    });
}

// Update brand options
function updateBrandOptions() {
    const brandSelect = document.getElementById('export-brand');
    brandSelect.innerHTML = '<option value="">Tüm Markalar</option>';
    
    brands.forEach(brand => {
        const option = document.createElement('option');
        option.value = brand;
        option.textContent = brand;
        brandSelect.appendChild(option);
    });
}

// Setup file inputs
function setupFileInputs() {
    console.log('🔧 Setting up file inputs with drag & drop...');
    const fileInputs = document.querySelectorAll('.file-input');
    console.log(`📁 Found ${fileInputs.length} file inputs`);
    
    fileInputs.forEach(input => {
        const uploadArea = input.parentElement;
        const label = input.nextElementSibling;
        const span = label.querySelector('span');
        
        console.log(`🎯 Setting up input: ${input.id}`);
        
        // Handle file selection via input
        input.addEventListener('change', function() {
            console.log(`📎 File selected for ${input.id}:`, this.files[0]?.name);
            updateFileLabel(this, span);
            
            // Show notification for normal file selection too
            if (this.files && this.files.length > 0 && window.notificationSystem) {
                const fileName = this.files[0].name;
                window.notificationSystem.success(
                    'Dosya Seçildi', 
                    `${fileName} başarıyla seçildi ve yüklenmeye hazır`
                );
            }
        });
        
        // Drag and drop functionality
        setupDragAndDrop(uploadArea, input, span);
    });
    
    console.log('✅ File inputs setup completed');
}

// Update file label text
function updateFileLabel(input, span) {
    if (input.files && input.files.length > 0) {
        span.textContent = input.files[0].name;
    } else {
        const fileType = input.id.replace('-file', '');
        const fileTypeName = fileType === 'excel' ? 'Excel' : 
                           fileType === 'csv' ? 'CSV' : 'JSON';
        span.textContent = `${fileTypeName} dosyası seçin veya sürükleyip bırakın`;
    }
}

// Setup drag and drop for file upload areas
function setupDragAndDrop(uploadArea, input, span) {
    console.log(`🎯 Setting up drag & drop for: ${input.id}`);
    
    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => {
            console.log(`🎨 Drag ${eventName} for ${input.id}`);
            uploadArea.classList.add('drag-over');
        }, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => {
            console.log(`🎨 Drag ${eventName} for ${input.id}`);
            uploadArea.classList.remove('drag-over');
        }, false);
    });

    // Handle dropped files
    uploadArea.addEventListener('drop', (e) => {
        console.log(`📁 Files dropped on ${input.id}:`, e.dataTransfer.files);
        const dt = e.dataTransfer;
        const files = dt.files;
        
        if (files.length > 0) {
            const file = files[0];
            const fileType = input.id.includes('excel') ? 'excel' : 
                           input.id.includes('csv') ? 'csv' : 'json';
            
            console.log(`🔍 Validating file: ${file.name} for type: ${fileType}`);
            
            // Validate file type
            if (validateFileType(file, fileType)) {
                console.log(`✅ File validation passed: ${file.name}`);
                // Create a new FileList object and assign to input
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                input.files = dataTransfer.files;
                
                // Update label
                updateFileLabel(input, span);
                
                // Show success notification using the existing notification system
                if (window.notificationSystem) {
                    window.notificationSystem.success(
                        'Dosya Yüklendi', 
                        `${file.name} başarıyla seçildi ve yüklenmeye hazır`
                    );
                } else {
                    showDragFeedback(uploadArea, 'success', `${file.name} başarıyla yüklendi`);
                }
            } else {
                console.log(`❌ File validation failed: ${file.name}`);
                // Show error notification using the existing notification system
                if (window.notificationSystem) {
                    window.notificationSystem.error(
                        'Geçersiz Dosya', 
                        `"${file.name}" dosyası ${fileType === 'excel' ? 'Excel (.xlsx, .xls)' : 
                                                   fileType === 'csv' ? 'CSV (.csv)' : 
                                                   'JSON (.json)'} formatında olmalıdır`
                    );
                } else {
                    showDragFeedback(uploadArea, 'error', `Geçersiz dosya türü: ${file.name}`);
                }
            }
        }
    }, false);
}

// Prevent default drag behaviors
function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

// Validate file type
function validateFileType(file, expectedType) {
    const fileName = file.name.toLowerCase();
    
    switch(expectedType) {
        case 'excel':
            return fileName.endsWith('.xlsx') || fileName.endsWith('.xls');
        case 'csv':
            return fileName.endsWith('.csv');
        case 'json':
            return fileName.endsWith('.json');
        default:
            return false;
    }
}

// Show drag feedback (fallback for cases where notification system is not available)
function showDragFeedback(uploadArea, type, message) {
    // This is now a fallback function - prefer using window.notificationSystem
    console.warn('Using fallback drag feedback instead of notification system');
    
    const feedback = document.createElement('div');
    feedback.className = `drag-feedback ${type}`;
    feedback.textContent = message;
    
    uploadArea.appendChild(feedback);
    
    setTimeout(() => {
        if (feedback.parentNode) {
            feedback.remove();
        }
    }, 3000);
}

// Export data (legacy function)
async function exportData(format) {
    const status = document.getElementById('export-status').value;
    const category = document.getElementById('export-category').value;
    const brand = document.getElementById('export-brand').value;
    const search = document.getElementById('export-search').value;
    
    const params = new URLSearchParams({
        status: status,
        category: category,
        brand: brand,
        search: search
    });
    
    showProgress(`${format.toUpperCase()} dosyası hazırlanıyor...`);
    
    try {
        const response = await fetch(`/api/ExportImport/export/${format}?${params}`);
        
        if (!response.ok) {
            throw new Error('Export işlemi başarısız');
        }
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        // Excel formatı için doğru uzantıyı kullan
        const fileExtension = format === 'excel' ? 'xlsx' : format;
        a.download = `products_${new Date().toISOString().split('T')[0]}.${fileExtension}`;
        a.click();
        window.URL.revokeObjectURL(url);
        
        hideProgress();
        showAlert('success', `${format.toUpperCase()} dosyası başarıyla indirildi.`);
    } catch (error) {
        hideProgress();
        showAlert('error', `Export işlemi başarısız: ${error.message}`);
    }
}

// Import data
async function importData(format) {
    const fileInput = document.getElementById(`${format}-file`);
    const updateExisting = document.getElementById('update-existing').checked;
    
    if (!fileInput.files || fileInput.files.length === 0) {
        if (window.notificationSystem) {
            window.notificationSystem.warning('İçe Aktarma Hatası', 'Lütfen bir dosya seçin');
        } else {
            showError('İçe Aktarma Hatası', 'Lütfen bir dosya seçin');
        }
        return;
    }
    
    const file = fileInput.files[0];
    const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
    
    // Büyük dosyalar için kullanıcıyı uyar
    if (file.size > 5 * 1024 * 1024) { // 5MB'den büyükse
        const confirmMessage = `Bu dosya oldukça büyük (${fileSizeMB} MB).\n\nİşlem zaman alabilir ve sayfa donmuş gibi görünebilir.\n\nDevam etmek istediğinizden emin misiniz?`;
        
        if (window.notificationSystem) {
            const confirmed = await new Promise(resolve => {
                window.notificationSystem.confirmModal(
                    'Büyük Dosya Uyarısı',
                    confirmMessage,
                    {
                        onConfirm: () => resolve(true),
                        onCancel: () => resolve(false)
                    }
                );
            });
            
            if (!confirmed) {
                return;
            }
        } else {
            if (!confirm(confirmMessage)) {
                return;
            }
        }
    }
    
    const formData = new FormData();
    formData.append('file', file);
    formData.append('updateExisting', updateExisting);
    
    // Dosya boyutuna göre progress mesajı
    let progressMessage = `${format.toUpperCase()} dosyası işleniyor...`;
    let progressDetails = `Dosya: ${file.name} (${fileSizeMB} MB)`;
    
    if (file.size > 5 * 1024 * 1024) { // 5MB'den büyükse
        progressDetails += '\nBüyük dosya tespit edildi, işlem biraz zaman alabilir...';
    }
    
    console.log('Progress gösteriliyor:', progressMessage, progressDetails);
    
    // Progress bar'ı kesinlikle göster
    if (window.showProgress) {
        console.log('Global progress indicator kullanılıyor');
        window.showProgress(progressMessage, progressDetails);
    } else {
        console.log('Progress indicator bulunamadı, alternatif gösterim kullanılıyor');
        showLocalProgress(progressMessage);
    }
    
    // Progress'in gösterildiğinden emin olmak için kısa bir gecikme
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // İlave progress güncelleme fonksiyonu
    const updateProgress = (phase) => {
        const phaseMessages = {
            'uploading': 'Dosya yükleniyor...',
            'processing': 'Veriler işleniyor...',
            'saving': 'Veritabanına kaydediliyor...',
            'finalizing': 'İşlem tamamlanıyor...'
        };
        
        const message = phaseMessages[phase] || progressMessage;
        if (window.showProgress) {
            window.progressIndicator.updateMessage(message, progressDetails);
        }
    };
    
    updateProgress('uploading');
    
    try {
        // Timeout ayarı - büyük dosyalar için daha uzun
        const timeoutMs = file.size > 10 * 1024 * 1024 ? 300000 : 120000; // 10MB üstü için 5dk, altı için 2dk
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, timeoutMs);
        
        const startTime = Date.now();
        
        updateProgress('processing');
        
        const response = await fetch(`/api/ExportImport/import/${format}`, {
            method: 'POST',
            body: formData,
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        updateProgress('finalizing');
        
        const result = await response.json();
        const processingTime = ((Date.now() - startTime) / 1000).toFixed(1);
        
        if (!response.ok) {
            throw new Error(result.error || 'Import işlemi başarısız');
        }
        
        console.log('Progress gizleniyor - işlem başarılı');
        
        // Global progress indicator gizle
        if (window.hideProgress) {
            window.hideProgress();
        } else {
            hideLocalProgress();
        }
        
        // Başarı mesajını HTML formatında hazırla
        const successMessage = `
            <div style="text-align: left; line-height: 1.6;">
                <p style="margin-bottom: 15px; font-size: 16px; color: #28a745;">
                    <strong>🎉 ${format.toUpperCase()} import işlemi başarıyla tamamlandı!</strong>
                </p>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h4 style="margin: 0 0 10px 0; color: #495057; font-size: 14px;">📊 İşlem İstatistikleri</h4>
                    <ul style="margin: 0; padding-left: 20px; list-style: none;">
                        <li style="margin-bottom: 8px; color: #495057;">
                            <span style="display: inline-block; width: 20px;">📦</span>
                            <strong>Toplam İşlenen:</strong> ${result.totalProcessed} ürün
                        </li>
                        <li style="margin-bottom: 8px; color: #28a745;">
                            <span style="display: inline-block; width: 20px;">➕</span>
                            <strong>Yeni Eklenen:</strong> ${result.inserted} ürün
                        </li>
                        <li style="margin-bottom: 8px; color: #17a2b8;">
                            <span style="display: inline-block; width: 20px;">🔄</span>
                            <strong>Güncellenen:</strong> ${result.updated} ürün
                        </li>
                        ${result.errors > 0 ? `
                        <li style="margin-bottom: 8px; color: #dc3545;">
                            <span style="display: inline-block; width: 20px;">⚠️</span>
                            <strong>Hata:</strong> ${result.errors} ürün
                        </li>` : ''}
                    </ul>
                </div>
                
                <div style="background: #e7f3ff; padding: 15px; border-radius: 8px;">
                    <h4 style="margin: 0 0 10px 0; color: #495057; font-size: 14px;">⚡ Performans Bilgileri</h4>
                    <ul style="margin: 0; padding-left: 20px; list-style: none;">
                        <li style="margin-bottom: 8px; color: #495057;">
                            <span style="display: inline-block; width: 20px;">⏱️</span>
                            <strong>İşlem Süresi:</strong> ${processingTime} saniye
                        </li>
                        ${result.performance ? `
                        <li style="margin-bottom: 8px; color: #495057;">
                            <span style="display: inline-block; width: 20px;">🚀</span>
                            <strong>İşlem Hızı:</strong> ${result.performance.avgItemsPerSecond} ürün/saniye
                        </li>` : ''}
                    </ul>
                </div>
            </div>
        `;
        
        // Use modal notification for important import operations
        if (window.notificationSystem) {
            window.notificationSystem.successModal(
                'İçe Aktarma Başarılı', 
                successMessage,
                {
                    onConfirm: () => {
                        // Clear file input after confirmation
                        fileInput.value = '';
                        const span = fileInput.nextElementSibling.querySelector('span');
                        span.textContent = `${format} dosyası seçin`;
                        
                        // Reload stats after successful import
                        loadStats();
                    }
                }
            );
        } else {
            showAlert('success', successMessage);
            
            // Clear file input
            fileInput.value = '';
            const span = fileInput.nextElementSibling.querySelector('span');
            span.textContent = `${format} dosyası seçin`;
            
            // Reload stats
            loadStats();
        }
        
        // Clear file input
        fileInput.value = '';
        const span = fileInput.nextElementSibling.querySelector('span');
        span.textContent = `${format} dosyası seçin`;
        
    } catch (error) {
        // Global progress indicator gizle
        if (window.hideProgress) {
            window.hideProgress();
        } else {
            hideLocalProgress();
        }
        
        let errorMessage = 'Import işlemi başarısız';
        
        if (error.name === 'AbortError') {
            errorMessage = 'Import işlemi zaman aşımına uğradı. Dosya çok büyük olabilir veya sunucu yoğun olabilir.';
        } else {
            errorMessage = `Import işlemi başarısız: ${error.message}`;
        }
        
        // Use critical notification for import errors
        if (window.notificationSystem) {
            window.notificationSystem.critical(
                'İçe Aktarma Hatası', 
                errorMessage
            );
        } else {
            showAlert('error', errorMessage);
        }
    }
}

// Local progress functions (fallback)
function showLocalProgress(message) {
    const progressSection = document.getElementById('progress-section');
    const progressText = document.getElementById('progress-text');
    const progressFill = document.getElementById('progress-fill');
    
    if (progressSection && progressText && progressFill) {
        progressText.textContent = message;
        progressFill.style.width = '0%';
        progressSection.classList.remove('hidden');
        progressSection.style.display = 'flex';
        
        // Animate progress
        let width = 0;
        window.progressAnimation = setInterval(() => {
            width += 2;
            progressFill.style.width = width + '%';
            
            if (width >= 90) {
                clearInterval(window.progressAnimation);
            }
        }, 100);
    }
}

// Local hide progress (fallback)
function hideLocalProgress() {
    const progressSection = document.getElementById('progress-section');
    const progressFill = document.getElementById('progress-fill');
    
    if (progressSection && progressFill) {
        // Clear animation interval if running
        if (window.progressAnimation) {
            clearInterval(window.progressAnimation);
            window.progressAnimation = null;
        }
        
        progressFill.style.width = '100%';
        
        setTimeout(() => {
            progressSection.style.display = 'none';
            progressSection.classList.add('hidden');
        }, 500);
    }
}

// Show modern toast notification using global notification system
function showAlert(type, message) {
    if (window.notificationSystem) {
        const title = {
            'success': '✅ Başarılı',
            'error': '❌ Hata',
            'warning': '⚠️ Uyarı',
            'info': 'ℹ️ Bilgi'
        }[type] || 'Bildirim';
        
        // Use appropriate notification method based on type
        if (type === 'error') {
            window.notificationSystem.important('error', title, message, {
                duration: 8000,
                persistent: false
            });
        } else {
            window.notificationSystem[type](title, message, {
                duration: type === 'success' ? 5000 : 6000,
                position: 'top-right'
            });
        }
    } else {
        console.error('NotificationSystem not available:', message);
    }
}

// Helper functions for specific notification types
function showSuccess(title, message) {
    window.notificationSystem.success(title, message, { duration: 5000 });
}

function showError(title, message) {
    window.notificationSystem.error(title, message, { duration: 8000 });
}

function showWarning(title, message) {
    window.notificationSystem.warning(title, message, { duration: 6000 });
}

function showInfo(title, message) {
    window.notificationSystem.info(title, message, { duration: 5000 });
}
</script>