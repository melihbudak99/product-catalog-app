using System.Reflection;
using System.Text.RegularExpressions;
using product_catalog_app.src.models;

namespace product_catalog_app.src.services
{
    public class ExportColumnService
    {
        private readonly List<ExportColumn> _availableColumns;

        public ExportColumnService()
        {
            _availableColumns = InitializeColumns();
        }

        /// <summary>
        /// T√ºm mevcut s√ºtunlarƒ± d√∂nd√ºr√ºr
        /// </summary>
        public List<ExportColumn> GetAvailableColumns()
        {
            return _availableColumns.ToList();
        }

        /// <summary>
        /// Kategoriye g√∂re s√ºtunlarƒ± d√∂nd√ºr√ºr
        /// </summary>
        public List<ExportColumn> GetColumnsByCategory(string category)
        {
            return _availableColumns.Where(c => c.Category == category).ToList();
        }

        /// <summary>
        /// Se√ßili s√ºtunlarƒ± d√∂nd√ºr√ºr
        /// </summary>
        public List<ExportColumn> GetSelectedColumns(List<string> selectedColumnNames)
        {
            return _availableColumns.Where(c => selectedColumnNames.Contains(c.PropertyName)).ToList();
        }

        /// <summary>
        /// Varsayƒ±lan s√ºtun se√ßimini d√∂nd√ºr√ºr
        /// </summary>
        public List<string> GetDefaultSelectedColumns()
        {
            // Varsayƒ±lan se√ßilmi≈ü s√ºtunlar
            var defaultColumns = new List<string>
            {
                // Temel Bilgiler
                "EanCode",
                "Id", 
                "Name",
                "SKU",
                "Brand",
                "Category",
                
                // Genel √ñzellikler
                "Desi",
                
                // Pazaryeri Barkodlarƒ±
                "TrendyolBarcode",
                "HepsiburadaBarcode",
                "HepsiburadaSellerStockCode",
                "KoctasBarcode",
                "KoctasIstanbulBarcode",
                "KoctasEanBarcode",
                "KoctasEanIstanbulBarcode",
                "HepsiburadaTedarikBarcode",
                "PttAvmBarcode",
                "PttUrunStokKodu",
                "PazaramaBarcode",
                "HaceyapiBarcode",
                "AmazonBarcode",
                "N11CatalogId",
                "N11ProductCode",
                "EntegraUrunId",
                "EntegraUrunKodu", 
                "EntegraBarkod",
                "SpareBarcode1",
                "SpareBarcode2",
                "SpareBarcode3",
                "SpareBarcode4"
            };

            return defaultColumns;
        }

        /// <summary>
        /// HTML a√ßƒ±klamayƒ± plain text'e √ßevirir
        /// </summary>
        public string ConvertHtmlToPlainText(string htmlContent)
        {
            if (string.IsNullOrEmpty(htmlContent))
                return string.Empty;

            var plainText = htmlContent;

            try
            {
                Console.WriteLine("üîÑ HTML to PlainText d√∂n√º≈ü√ºm√º ba≈ülatƒ±ldƒ±...");
                Console.WriteLine($"üìù Orjinal HTML: {htmlContent.Substring(0, Math.Min(100, htmlContent.Length))}...");

                // Remove Microsoft Word specific classes and styles
                plainText = Regex.Replace(plainText, @"class=""MsoNormal""", "", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"style=""[^""]*mso-[^""]*""", "", RegexOptions.IgnoreCase);
                
                // Fix nested paragraph tags - remove inner p tags
                plainText = Regex.Replace(plainText, @"<p[^>]*>(\s*<p[^>]*>)+", "<p>", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"(</p>\s*)+</p>", "</p>", RegexOptions.IgnoreCase);
                
                // Remove empty paragraphs
                plainText = Regex.Replace(plainText, @"<p[^>]*>\s*</p>", "", RegexOptions.IgnoreCase);
                
                // Fix list structure - move ul outside of p tags  
                plainText = Regex.Replace(plainText, @"<p[^>]*>(\s*<ul>)", "$1", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"(</ul>\s*)</p>", "$1", RegexOptions.IgnoreCase);
                
                // Process indent classes before removing HTML tags
                plainText = ProcessIndentClassesToPlainText(plainText);
                
                // Replace list items with bullet points
                plainText = Regex.Replace(plainText, @"<li[^>]*>", "‚Ä¢ ", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"</li>", "\n", RegexOptions.IgnoreCase);
                
                // Replace paragraph breaks with line breaks
                plainText = Regex.Replace(plainText, @"</p>\s*<p[^>]*>", "\n\n", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"<p[^>]*>", "", RegexOptions.IgnoreCase);
                plainText = Regex.Replace(plainText, @"</p>", "\n", RegexOptions.IgnoreCase);
                
                // Replace line breaks
                plainText = Regex.Replace(plainText, @"<br\s*/?>\s*", "\n", RegexOptions.IgnoreCase);
                
                // Remove all remaining HTML tags
                plainText = Regex.Replace(plainText, @"<[^>]+>", "", RegexOptions.IgnoreCase);
                
                // Clean up whitespace
                plainText = Regex.Replace(plainText, @"\n\s*\n", "\n\n", RegexOptions.Multiline);
                plainText = Regex.Replace(plainText, @"^\s+|\s+$", "", RegexOptions.Multiline);
                
                // Decode HTML entities
                plainText = System.Net.WebUtility.HtmlDecode(plainText);
                
                Console.WriteLine($"‚úÖ Temizlenmi≈ü PlainText: {plainText.Substring(0, Math.Min(100, plainText.Length))}...");
                
                return plainText.Trim();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå HTML temizleme hatasƒ±: {ex.Message}");
                // Hata durumunda basit temizleme yap
                plainText = Regex.Replace(htmlContent, @"<[^>]*>", "");
                plainText = System.Net.WebUtility.HtmlDecode(plainText);
                return Regex.Replace(plainText, @"\s+", " ").Trim();
            }
        }

        /// <summary>
        /// HTML export i√ßin temizler ve formatlar
        /// </summary>
        public string CleanHtmlForExport(string htmlContent)
        {
            if (string.IsNullOrEmpty(htmlContent))
                return string.Empty;

            string cleaned = htmlContent;
            
            try
            {
                // Remove Microsoft Word specific classes and styles
                cleaned = Regex.Replace(cleaned, @"class=""MsoNormal""", "", RegexOptions.IgnoreCase);
                cleaned = Regex.Replace(cleaned, @"style=""[^""]*mso-[^""]*""", "", RegexOptions.IgnoreCase);
                
                // Fix nested paragraph tags - remove inner p tags
                cleaned = Regex.Replace(cleaned, @"<p[^>]*>(\s*<p[^>]*>)+", "<p>", RegexOptions.IgnoreCase);
                cleaned = Regex.Replace(cleaned, @"(</p>\s*)+</p>", "</p>", RegexOptions.IgnoreCase);
                
                // Remove empty paragraphs
                cleaned = Regex.Replace(cleaned, @"<p[^>]*>\s*</p>", "", RegexOptions.IgnoreCase);
                
                // Fix list structure - move ul outside of p tags
                cleaned = Regex.Replace(cleaned, @"<p[^>]*>(\s*<ul>)", "$1", RegexOptions.IgnoreCase);
                cleaned = Regex.Replace(cleaned, @"(</ul>\s*)</p>", "$1", RegexOptions.IgnoreCase);
                
                // Clean up multiple consecutive line breaks and spaces
                cleaned = Regex.Replace(cleaned, @"\s+", " ", RegexOptions.Multiline);
                cleaned = Regex.Replace(cleaned, @">\s+<", "><", RegexOptions.IgnoreCase);
                
                // Remove style attributes but preserve indent classes
                cleaned = Regex.Replace(cleaned, @"\s*style=""[^""]*""", "", RegexOptions.IgnoreCase);
                
                // Preserve indent-level classes for export compatibility
                // These classes will be properly converted to plain text indentation
                
                return cleaned.Trim();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå HTML temizleme hatasƒ±: {ex.Message}");
                return htmlContent; // Hata durumunda orijinal HTML'i d√∂nd√ºr
            }
        }

        /// <summary>
        /// Girinti CSS class'larƒ±nƒ± plain text girinti formatƒ±na √ßevirir
        /// </summary>
        private string ProcessIndentClassesToPlainText(string htmlContent)
        {
            if (string.IsNullOrEmpty(htmlContent))
                return string.Empty;

            var processed = htmlContent;
            
            try
            {
                // indent-level-1 to indent-level-5 class'larƒ±nƒ± i≈üle
                for (int level = 1; level <= 5; level++)
                {
                    var indentSpaces = new string(' ', level * 4); // Her seviye i√ßin 4 bo≈üluk
                    var pattern = $@"<([^>]+)\s+class=""[^""]*indent-level-{level}[^""]*""([^>]*)>";
                    
                    // Class'ƒ± kaldƒ±r ve i√ßeriƒüi girinti ile deƒüi≈ütir
                    processed = Regex.Replace(processed, pattern, (match) =>
                    {
                        var tag = match.Groups[1].Value;
                        var attributes = match.Groups[2].Value;
                        
                        // Class attribute'unu temizle
                        attributes = Regex.Replace(attributes, @"\s*class=""[^""]*""", "", RegexOptions.IgnoreCase);
                        
                        return $"<{tag}{attributes}>{indentSpaces}";
                    }, RegexOptions.IgnoreCase);
                }
                
                Console.WriteLine($"‚úÖ Girinti class'larƒ± plain text'e d√∂n√º≈üt√ºr√ºld√º");
                return processed;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Girinti i≈üleme hatasƒ±: {ex.Message}");
                return htmlContent; // Hata durumunda orijinal i√ßeriƒüi d√∂nd√ºr
            }
        }

        /// <summary>
        /// Product nesnesinden deƒüer alƒ±r
        /// </summary>
        public object? GetProductValue(Product product, string propertyName)
        {
            try
            {
                // √ñzel durumlar i√ßin kontrol
                switch (propertyName)
                {
                    // Logo barkodlarƒ± - ayrƒ± indeksli eri≈üim
                    case "LogoBarcode1":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 0);
                    case "LogoBarcode2":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 1);
                    case "LogoBarcode3":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 2);
                    case "LogoBarcode4":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 3);
                    case "LogoBarcode5":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 4);
                    case "LogoBarcode6":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 5);
                    case "LogoBarcode7":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 6);
                    case "LogoBarcode8":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 7);
                    case "LogoBarcode9":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 8);
                    case "LogoBarcode10":
                        return GetLogoBarcodeByIndex(product.LogoBarcodes, 9);
                    
                    // √úr√ºn g√∂rselleri - List'ten ayrƒ± indeksli eri≈üim
                    case "ProductImage1":
                        return GetImageUrlByIndex(product.ImageUrls, 0);
                    case "ProductImage2":
                        return GetImageUrlByIndex(product.ImageUrls, 1);
                    case "ProductImage3":
                        return GetImageUrlByIndex(product.ImageUrls, 2);
                    case "ProductImage4":
                        return GetImageUrlByIndex(product.ImageUrls, 3);
                    case "ProductImage5":
                        return GetImageUrlByIndex(product.ImageUrls, 4);
                    case "ProductImage6":
                        return GetImageUrlByIndex(product.ImageUrls, 5);
                    case "ProductImage7":
                        return GetImageUrlByIndex(product.ImageUrls, 6);
                    case "ProductImage8":
                        return GetImageUrlByIndex(product.ImageUrls, 7);
                    case "ProductImage9":
                        return GetImageUrlByIndex(product.ImageUrls, 8);
                    case "ProductImage10":
                        return GetImageUrlByIndex(product.ImageUrls, 9);
                    
                    // Pazaryeri g√∂rselleri - List'ten ayrƒ± indeksli eri≈üim
                    case "MarketplaceImage1":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 0);
                    case "MarketplaceImage2":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 1);
                    case "MarketplaceImage3":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 2);
                    case "MarketplaceImage4":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 3);
                    case "MarketplaceImage5":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 4);
                    case "MarketplaceImage6":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 5);
                    case "MarketplaceImage7":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 6);
                    case "MarketplaceImage8":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 7);
                    case "MarketplaceImage9":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 8);
                    case "MarketplaceImage10":
                        return GetImageUrlByIndex(product.MarketplaceImageUrls, 9);
                    
                    // Video URL'leri - List'ten ayrƒ± indeksli eri≈üim
                    case "Video1":
                        return GetImageUrlByIndex(product.VideoUrls, 0);
                    case "Video2":
                        return GetImageUrlByIndex(product.VideoUrls, 1);
                    case "Video3":
                        return GetImageUrlByIndex(product.VideoUrls, 2);
                    case "Video4":
                        return GetImageUrlByIndex(product.VideoUrls, 3);
                    case "Video5":
                        return GetImageUrlByIndex(product.VideoUrls, 4);
                    
                    default:
                        // Reflection ile deƒüer al
                        var propertyInfo = typeof(Product).GetProperty(propertyName);
                        if (propertyInfo != null)
                        {
                            var value = propertyInfo.GetValue(product);
                            
                            // List<string> t√ºr√ºndeki deƒüerleri olduƒüu gibi d√∂nd√ºr
                            if (value is List<string> stringList)
                            {
                                return stringList; // List olarak d√∂nd√ºr, join yapmayacaƒüƒ±z
                            }
                            
                            return value;
                        }
                        break;
                }
            }
            catch (Exception)
            {
                return null;
            }

            return null;
        }

        /// <summary>
        /// Export verilerini hazƒ±rlar
        /// </summary>
        public List<ExportProductData> PrepareExportData(List<Product> products, List<string> selectedColumns, DescriptionExportOptions? descriptionOptions = null)
        {
            var exportData = new List<ExportProductData>();
            var selectedColumnDefinitions = GetSelectedColumns(selectedColumns);

            // A√ßƒ±klama se√ßenekleri varsayƒ±lan deƒüerler
            descriptionOptions ??= new DescriptionExportOptions();

            foreach (var product in products)
            {
                var productData = new ExportProductData();

                foreach (var column in selectedColumnDefinitions.OrderBy(c => c.Order))
                {
                    var value = GetProductValue(product, column.PropertyName);
                    
                    // √ñzel a√ßƒ±klama i≈üleme - sadece HTML ve PlainText s√ºtunlarƒ± i√ßin
                    if (column.PropertyName == "Description_HTML" && !string.IsNullOrEmpty(product.Description))
                    {
                        // HTML formatƒ±nda a√ßƒ±klama - temizlenmi≈ü HTML
                        var cleanedHtml = CleanHtmlForExport(product.Description);
                        productData.SetValue(column.PropertyName, cleanedHtml);
                    }
                    else if (column.PropertyName == "Description_PlainText" && !string.IsNullOrEmpty(product.Description))
                    {
                        // D√ºz metin formatƒ±nda a√ßƒ±klama
                        var plainText = ConvertHtmlToPlainText(product.Description);
                        productData.SetValue(column.PropertyName, plainText);
                    }
                    else
                    {
                        // Diƒüer t√ºm s√ºtunlar normal ≈üekilde i≈ülenir
                        productData.SetValue(column.PropertyName, value);
                    }
                }

                // Eƒüer a√ßƒ±klama se√ßenekleri aktifse ama s√ºtunlar se√ßilmemi≈üse, dinamik olarak ekle
                if (descriptionOptions.IncludeHtml && !selectedColumns.Contains("Description_HTML") && !string.IsNullOrEmpty(product.Description))
                {
                    var cleanedHtml = CleanHtmlForExport(product.Description);
                    productData.SetValue(descriptionOptions.HtmlColumnName, cleanedHtml);
                }

                if (descriptionOptions.IncludePlainText && !selectedColumns.Contains("Description_PlainText") && !string.IsNullOrEmpty(product.Description))
                {
                    var plainText = ConvertHtmlToPlainText(product.Description);
                    productData.SetValue(descriptionOptions.PlainTextColumnName, plainText);
                }

                exportData.Add(productData);
            }

            return exportData;
        }

        /// <summary>
        /// S√ºtun tanƒ±mlarƒ±nƒ± ba≈ülatƒ±r - Yeni kategori d√ºzeni
        /// </summary>
        private List<ExportColumn> InitializeColumns()
        {
            var columns = new List<ExportColumn>();

            // Tarihler
            columns.AddRange(new[]
            {
                new ExportColumn { PropertyName = "CreatedDate", DisplayName = "Olu≈üturma Tarihi", Category = "Tarihler", IsSelected = false, DataType = "datetime", Order = 1 },
                new ExportColumn { PropertyName = "UpdatedDate", DisplayName = "G√ºncelleme Tarihi", Category = "Tarihler", IsSelected = false, DataType = "datetime", Order = 2 },
            });

            // Stat√º
            columns.AddRange(new[]
            {
                new ExportColumn { PropertyName = "IsArchived", DisplayName = "Ar≈üivlenmi≈ü", Category = "Stat√º", IsSelected = false, DataType = "bool", Order = 11 },
            });

            // Temel Bilgiler
            columns.AddRange(new[]
            {
                new ExportColumn { PropertyName = "EanCode", DisplayName = "EAN Kodu", Category = "Temel Bilgiler", IsSelected = true, DataType = "string", Order = 20 },
                new ExportColumn { PropertyName = "Id", DisplayName = "ID", Category = "Temel Bilgiler", IsRequired = true, DataType = "int", Order = 21 },
                new ExportColumn { PropertyName = "Name", DisplayName = "√úr√ºn Adƒ±", Category = "Temel Bilgiler", IsRequired = true, DataType = "string", Order = 22 },
                new ExportColumn { PropertyName = "SKU", DisplayName = "SKU", Category = "Temel Bilgiler", IsSelected = true, DataType = "string", Order = 23 },
                new ExportColumn { PropertyName = "Brand", DisplayName = "Marka", Category = "Temel Bilgiler", IsSelected = true, DataType = "string", Order = 24 },
                new ExportColumn { PropertyName = "Category", DisplayName = "Kategori", Category = "Temel Bilgiler", IsSelected = true, DataType = "string", Order = 25 },
            });

            // A√ßƒ±klama ve Notlar
            columns.AddRange(new[]
            {
                new ExportColumn { PropertyName = "Description_HTML", DisplayName = "A√ßƒ±klama (HTML)", Category = "A√ßƒ±klama ve Notlar", IsSelected = false, DataType = "string", Order = 30 },
                new ExportColumn { PropertyName = "Description_PlainText", DisplayName = "A√ßƒ±klama (D√ºz Metin)", Category = "A√ßƒ±klama ve Notlar", IsSelected = false, DataType = "string", Order = 31 },
                new ExportColumn { PropertyName = "Features", DisplayName = "√ñzellikler", Category = "A√ßƒ±klama ve Notlar", IsSelected = false, DataType = "string", Order = 32 },
                new ExportColumn { PropertyName = "Notes", DisplayName = "Notlar", Category = "A√ßƒ±klama ve Notlar", IsSelected = false, DataType = "string", Order = 33 },
            });

            // Genel √ñzellikler
            columns.AddRange(new[]
            {
                new ExportColumn { PropertyName = "Weight", DisplayName = "Aƒüƒ±rlƒ±k (kg)", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 40 },
                new ExportColumn { PropertyName = "Desi", DisplayName = "Desi", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 41 },
                new ExportColumn { PropertyName = "Width", DisplayName = "Geni≈ülik (cm)", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 42 },
                new ExportColumn { PropertyName = "Height", DisplayName = "Y√ºkseklik (cm)", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 43 },
                new ExportColumn { PropertyName = "Depth", DisplayName = "En (cm)", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 44 },
                new ExportColumn { PropertyName = "Length", DisplayName = "Uzunluk (cm)", Category = "Genel √ñzellikler", IsSelected = false, DataType = "decimal", Order = 45 },
                new ExportColumn { PropertyName = "Material", DisplayName = "Malzeme", Category = "Genel √ñzellikler", IsSelected = false, DataType = "string", Order = 46 },
                new ExportColumn { PropertyName = "Color", DisplayName = "Renk", Category = "Genel √ñzellikler", IsSelected = false, DataType = "string", Order = 47 },
                new ExportColumn { PropertyName = "WarrantyMonths", DisplayName = "Garanti", Category = "Genel √ñzellikler", IsSelected = false, DataType = "int", Order = 48 },
            });

            // √úr√ºn √ñzellikleri (Kabin Tipi kaldƒ±rƒ±ldƒ±)
            var productFeatures = new[]
            {
                ("KlozetKanalYapisi", "Klozet Kanal Yapƒ±sƒ±"),
                ("KlozetTipi", "Klozet Tipi"),
                ("KlozetKapakCinsi", "Klozet Kapak Cinsi"),
                ("KlozetMontajTipi", "Klozet Montaj Tipi"),
                ("LawaboSuTasmaDeligi", "Lavabo Su Ta≈üma Deliƒüi"),
                ("LawaboArmaturDeligi", "Lavabo Armatur Deliƒüi"),
                ("LawaboTipi", "Lavabo Tipi"),
                ("LawaboOzelligi", "Lavabo √ñzelliƒüi"),
                ("BataryaCikisUcuUzunlugu", "Batarya √áƒ±kƒ±≈ü Ucu Uzunluƒüu"),
                ("BataryaYuksekligi", "Batarya Y√ºksekliƒüi"),
            };

            int productFeatureOrder = 50;
            foreach (var (prop, display) in productFeatures)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = prop, 
                    DisplayName = display, 
                    Category = "√úr√ºn √ñzellikleri", 
                    IsSelected = false, 
                    DataType = "string", 
                    Order = productFeatureOrder++ 
                });
            }

            // Pazaryeri Barkodlarƒ±
            var marketplaceBarcodes = new[]
            {
                ("TrendyolBarcode", "Trendyol Barkod"),
                ("HepsiburadaBarcode", "Hepsiburada Barkod"),
                ("HepsiburadaSellerStockCode", "Hepsiburada Satƒ±cƒ± Stok Kodu"),
                ("KoctasBarcode", "Ko√ßta≈ü Barkod"),
                ("KoctasIstanbulBarcode", "Ko√ßta≈ü ƒ∞stanbul Barkod"),
                ("KoctasEanBarcode", "Ko√ßta≈ü EAN Barkod"),
                ("KoctasEanIstanbulBarcode", "Ko√ßta≈ü EAN ƒ∞stanbul Barkod"),
                ("HepsiburadaTedarikBarcode", "Hepsiburada Tedarik Barkod"),
                ("PttAvmBarcode", "PTT AVM Barkod"),
                ("PttUrunStokKodu", "PTT √úr√ºn ID"),
                ("PazaramaBarcode", "Pazarama Barkod"),
                ("HaceyapiBarcode", "Haceyapƒ± Barkod"),
                ("AmazonBarcode", "Amazon Barkod"),
                ("N11CatalogId", "N11 Katalog ID"),
                ("N11ProductCode", "N11 √úr√ºn Kodu"),
                ("EntegraUrunId", "Entegra √úr√ºn ID"),
                ("EntegraUrunKodu", "Entegra √úr√ºn Kodu"),
                ("EntegraBarkod", "Entegra Barkod"),
                ("SpareBarcode1", "Yedek Barkod 1"),
                ("SpareBarcode2", "Yedek Barkod 2"),
                ("SpareBarcode3", "Yedek Barkod 3"),
                ("SpareBarcode4", "Yedek Barkod 4"),
            };

            int barcodeOrder = 60;
            foreach (var (prop, display) in marketplaceBarcodes)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = prop, 
                    DisplayName = display, 
                    Category = "Pazaryeri Barkodlarƒ±", 
                    IsSelected = true, 
                    DataType = "string", 
                    Order = barcodeOrder++ 
                });
            }

            // Logo Barkodlarƒ±
            for (int i = 1; i <= 10; i++)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = $"LogoBarcode{i}", 
                    DisplayName = $"Logo Barkodu {i}", 
                    Category = "Logo Barkodlarƒ±", 
                    IsSelected = true, 
                    DataType = "string", 
                    Order = 80 + i 
                });
            }

            // √úr√ºn G√∂rselleri
            for (int i = 1; i <= 10; i++)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = $"ProductImage{i}", 
                    DisplayName = $"√úr√ºn G√∂rseli {i}", 
                    Category = "√úr√ºn G√∂rselleri", 
                    IsSelected = false, 
                    DataType = "string", 
                    Order = 90 + i 
                });
            }

            // Pazaryeri G√∂rselleri
            for (int i = 1; i <= 10; i++)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = $"MarketplaceImage{i}", 
                    DisplayName = $"Pazaryeri G√∂rseli {i}", 
                    Category = "Pazaryeri G√∂rselleri", 
                    IsSelected = false, 
                    DataType = "string", 
                    Order = 100 + i 
                });
            }

            // Videolar
            for (int i = 1; i <= 5; i++)
            {
                columns.Add(new ExportColumn 
                { 
                    PropertyName = $"Video{i}", 
                    DisplayName = $"Video {i}", 
                    Category = "Videolar", 
                    IsSelected = false, 
                    DataType = "string", 
                    Order = 110 + i 
                });
            }

            return columns;
        }

        /// <summary>
        /// Logo barkodlarƒ± JSON string'inden belirli index'teki deƒüeri alƒ±r
        /// </summary>
        private string GetLogoBarcodeByIndex(string logoBarcodes, int index)
        {
            if (string.IsNullOrEmpty(logoBarcodes))
                return string.Empty;

            try
            {
                // JSON formatƒ±nda ise parse et
                if (logoBarcodes.Trim().StartsWith("["))
                {
                    var barcodeList = System.Text.Json.JsonSerializer.Deserialize<List<string>>(logoBarcodes);
                    return barcodeList != null && index < barcodeList.Count ? barcodeList[index] : string.Empty;
                }
                else if (logoBarcodes.Contains(","))
                {
                    // Virg√ºl ile ayrƒ±lmƒ±≈ü format
                    var barcodes = logoBarcodes.Split(',')
                        .Select(x => x.Trim())
                        .ToList();
                    return index < barcodes.Count ? barcodes[index] : string.Empty;
                }
                else
                {
                    // Satƒ±r satƒ±r ayrƒ±lmƒ±≈ü format
                    var lines = logoBarcodes.Split('\n', '\r')
                        .Where(x => !string.IsNullOrWhiteSpace(x))
                        .Select(x => x.Trim())
                        .ToList();
                    return index < lines.Count ? lines[index] : string.Empty;
                }
            }
            catch
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// URL listesinden belirli index'teki deƒüeri alƒ±r
        /// </summary>
        private string GetImageUrlByIndex(List<string>? urlList, int index)
        {
            if (urlList == null || index < 0 || index >= urlList.Count)
                return string.Empty;
                
            return urlList[index] ?? string.Empty;
        }
    }
}
